<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/11/19
 * Time: 21.43
 */
namespace App\Http\Controllers\Core;

use App\Helpers\AuthUtil;
use App\Helpers\Util;
use App\Http\Controllers\Core\AdminController;
use App\Models\Core\Mongo\User;
use App\Models\Core\Mongo\Role;
use App\Models\Obj\AclObject;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class RoleController extends AdminController
{
    /**
     * UserController constructor.
     */
    public function __construct()
    {
        parent::__construct();

//        $this->res_path = 'views/core/role';
//        $this->yml_file = 'fields';

        $this->res_path = 'models/controllers/core';
        $this->yml_file = 'role_controller';

        $this->entity = 'Role';

        $this->auth_entity = 'roles';
        $this->view_base = 'core.role';

        $this->model = new Role();

    }


    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function getIndex()
    {
        $this->title = 'User Roles';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);

        $this->nav_section = 'users';

        $this->template_var = [ 'hasSideNav'=>true ];

        $this->controller_base = 'role';

        $this->runUrlSet();
        $this->runAcl();
        $this->runViewSet();


        $this->import_commit_url = 'role/commit';

        $this->logo = env('APP_LOGO');

        $this->show_title = true;

        $this->viewer_layout = 'core.role.formlayout';
        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'core.role.formlayout';
        $this->form_dialog_size = 'xl';

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        $aclDefault = AuthUtil::getAclEntityModel();

        $formOptions['roleACLDefaultObject'] = $aclDefault;

        $this->aux_data = $formOptions;

        $this->non_closing_save = true;

        $this->add_title_fields = '"<h4> Add Role</h4>"';

        $this->update_title_fields = '"Update " + this.rolename';

        $this->view_title_fields = 'this.rolename';

        return parent::getIndex();
    }

    public function postIndex(Request $request)
    {
        $this->defOrderField = 'updated_at';
        $this->defOrderDir = 'desc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {
        $this->def_param['roleACL'] = AuthUtil::getAclEntityModel();
        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    public function beforeUpdateForm($population)
    {
        if(isset( $population['roleACL']) && is_array($population['roleACL'])){
            $pmodel = AuthUtil::getAclEntityModel();

            //info('config-acl-model',$pmodel);
            debug($pmodel);

            $cmodel = $population['roleACL'];

            debug($cmodel);

            foreach ($pmodel as $k=>$v){

                if(isset($cmodel[$k])){

                }else{
                    $cmodel[$k] = $v;
                }

                $apmodel = $this->ItoKV( 'key', $pmodel[$k]['acl'] );
                $acmodel = $this->ItoKV( 'key', $cmodel[$k]['acl'] );

                foreach($apmodel as $pk=>$pv){
                    if(isset($acmodel[$pk])){

                    }else{
                        array_push($cmodel[$k]['acl'], $apmodel[$pk] );
                    }
                }

                $cmodel[$k]['enabled'] = $cmodel[$k]['enabled'] ?? true;

            }

            foreach ($cmodel as $ck=>$cv){
                if(isset( $pmodel[$ck])){

                }else{
                    unset($cmodel[$ck]);
                }
            }


            info('object-acl-model-merged',$cmodel);
            debug($cmodel);

            $population['roleACL'] = $cmodel;
        }else{
            $population['roleACL'] = AuthUtil::getAclEntityModel();
        }

        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function ItoKV($keyField, $arr){
        $res = [];
        foreach($arr as $r){
            if(isset($r[$keyField])){
                $res[ $r[$keyField] ] = $r;
            }
        }
        return $res;
    }


    public function getAuto(Request $request)
    {
        $this->model = new Role();
        $this->yml_file = 'fields';
        $this->res_path = 'views/core/role';
        return parent::getAuto($request); // TODO: Change the autogenerated stub
    }


    public function postDlxl(Request $request)
    {
        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);

        return parent::postDlxl($request); // TODO: Change the autogenerated stub
    }

}
