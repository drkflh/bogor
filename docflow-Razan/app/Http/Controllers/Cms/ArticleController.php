<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Cms;

use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Helpers\Injector;
use App\Http\Controllers\Core\AdminController;
use App\Models\Cms\Article;
use App\Models\Cms\Category;
use App\Models\Cms\Section;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;


class ArticleController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/cms';
        $this->yml_file = 'article_controller';

        $this->entity = 'Article';
        $this->view_base = 'cms.article';
        $this->auth_entity = 'cms-article';
        $this->controller_base = 'cms/article';

        $this->model = new Article();
    }

    /**
     * @hideFromAPIDocumentation
     * @return mixed
     */
    public function getIndex()
    {
        $this->title = 'Article';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);

        $this->template_var = [ 'hasSideNav'=>true ];


        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->import_commit_url = 'cms/article/commit';

        $this->logo = env('APP_LOGO');

        $this->show_title = true;

        $this->viewer_layout = 'cms.article.formlayout';

        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'cms.article.formlayout';
        $this->form_dialog_size = 'xl';


        $this->can_approve = false;
        $this->can_request_approval = false;
        $this->can_revise = false;

        /* slot view for cell formating
        */
        //$this->table_slot_view = 'loyalty.reference/productcategory.tableslot';
         // use injector to provide options for simpleselect / localselect
         $uiOptions =[];
         $uiOptions = Injector::setModel( Category::orderBy('categoryCode') ) // gunakan model sebagai input, set query disini
         ->toModelArray() // akan running query dan menghasilkan array object
         ->toOptions('categoryName', 'categoryCode', true) // jadikan option untuk select
         ->injectOption('category', $uiOptions); // inject ke uioptions, gunakan nama field biasa tanpa suffix, suffix & prefix akan dihandle di fungsi injectOption

         $uiOptions = Injector::setModel( Section::orderBy('sectionCode') ) // gunakan model sebagai input, set query disini
         ->toModelArray() // akan running query dan menghasilkan array object
         ->toOptions('sectionName', 'sectionCode', true) // jadikan option untuk select
         ->injectOption('section', $uiOptions); // inject ke uioptions, gunakan nama field biasa tanpa suffix, suffix & prefix akan dihandle di fungsi injectOption

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();
        $this->aux_data = array_merge( $uiOptions ,$formOptions);


//        $this->view_title_fields = 'this.title';

//        $this->table_component = 'ant-vue-table';

        return parent::getIndex();
    }

    /**
     * @hideFromAPIDocumentation
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function postIndex(Request $request)
    {

        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {
        $this->def_param['section'] = 'article';
        return parent::getParam(); // TODO: Change the autogenerated stub
    }


    public function additionalQuery($model, Request $request)
    {
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        $model = $model->where('section','=', 'article' );
        return $model;
    }

    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        $data['version'] = config('dbversions.product_categories');
        return parent::beforeSave($data);
    }

    protected function rowPostProcess($row)
    {
        /* modify or add new fields */
        //$row['linkConsult'] = url('clinic/patient/km/'.$row['_id']);
        //$row['linkOp'] = url('clinic/patient/op/'.$row['_id']);

        return parent::rowPostProcess($row);
    }

    // Transform fields before commited into the database collection ( xls import )
    public function beforeImportCommit($data)
    {
        //example : transform imported data to datetime field
        // $data['IODate'] = ImportUtil::excelDateToNormal($data['IODate']);
        // $data['DocDate'] = ImportUtil::excelDateToNormal($data['DocDate']);
        // $data['RetDate'] = ImportUtil::excelDateToNormal($data['RetDate']);
        // $data['DispDate'] = ImportUtil::excelDateToNormal($data['DispDate']);
        $data['version'] = config('dbversions.product_categories');
        return parent::beforeImportCommit($data); // TODO: Change the autogenerated stub
    }


    public function beforeUpdate($id, $data)
    {
        $data['version'] = config('dbversions.product_categories');
        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }
}
