<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Dwf;

use App\Helpers\App\DwfUtil;
use App\Helpers\App\FileUtil;
use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Http\Controllers\Core\AdminController;
use App\Models\Dwf\Doc;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Laravel\File;

class  RepositoryController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

//        $this->res_path = 'views/dwf/repository';
//        $this->yml_file = 'fields';

        $this->res_path = 'models/controllers/dwf';
        $this->yml_file = 'repository_controller';

        $this->entity = 'Document';

        // this must be set to use ACL
        $this->auth_entity = 'dms-repository';

        // set controller path
        $this->controller_base = 'dwf/repository';

        // set view base to include standard slot
        $this->view_base = 'dwf.repository';
        $this->model = new Doc();
    }

    public function getIndex()
    {
        $this->title = 'Document Register';

        $cname = substr(strrchr(get_class($this), '\\'), 1);

        $this->controller_name = str_replace('Controller', '', $cname);

        $this->template_var = [ 'hasSideNav'=>true ];

        $this->logo = env('APP_LOGO');

        $this->show_title = true;
        $this->viewer_layout = 'dwf.repository.viewlayout';

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'dwf.repository.formlayout';
        $this->form_dialog_size = 'xl';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->can_multi_clone = false;
        $this->can_clone = false;

        $this->print_template = 'document-label';
        $this->print_modal_size = 'lg';

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        $formOptions['IOOptions'] = [ ['text'=>'Incoming', 'value'=>'Incoming'], ['text'=>'Outgoing', 'value'=>'Outgoing'] ];
        $formOptions['TipeOptions'] = DwfUtil::toOptions( DwfUtil::getDocType(), 'DocType', 'DocType', false );
        $formOptions['CoyOptions'] = DwfUtil::toOptions( DwfUtil::getCompany(), 'CoyName', 'CoyCode', false );
        $formOptions['RetPerOptions'] = DwfUtil::toOptions( DwfUtil::getYearOptions(), 'Desc', 'DisYr', false );
        $formOptions['DispPerOptions'] = DwfUtil::toOptions( DwfUtil::getYearOptions(), 'Desc', 'DisYr', false );

        $formOptions['TopicObjectOptions'] = DwfUtil::toOptions( DwfUtil::getTopics(), 'Topic', '_object', false );

        $formOptions['selectedSheets'] = 0;
        $formOptions['boxIdInput'] = "``";

        $formOptions['sourceDir'] = "'".env('DEFAULT_SOURCE_DIR')."'";
        $formOptions['scanMode'] = "'copy'";
        $formOptions['scanning'] = "false";

        $formOptions['labelTemplate'] = '`'.file_get_contents( resource_path('views/dwf/repository/labeltemplate.html') ).'`';
        $formOptions['printTemplate'] = '`'.file_get_contents( resource_path('views/dwf/repository/printtemplate.html') ).'`';
        $formOptions['printLabelData'] = "``";

        $this->view_title_fields = '"<h4>View " + this.FCallCode + "</h4>"';
        $this->update_title_fields = '"<h4>Update " + this.FCallCode + "</h4>"';

        $this->aux_data = $formOptions;

        return parent::getIndex();
    }

    public function postIndex(Request $request)
    {
        $this->defOrderField = 'IODate';
        $this->defOrderDir = 'desc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {
        $today = date('Y-m-d H:i:s', time());
        $this->def_param['IO'] = 'Incoming';
        $this->def_param['Status'] = 'Active';
        $this->def_param['RetPer'] = 2;
        $this->def_param['DispPer'] = 5;
        $this->def_param['IODate'] = $today;

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    public function postGetSeq(Request $request)
    {
        $entity = $request->get('entity');

        if( $request->has('padding') ){
            $padding = $request->get('padding')??env('NUM_PAD', 5);
        }else{
            $padding = env('NUM_PAD', 5);
        }

        if( is_null($entity) && $entity != ''){
            $seq = false;
        }else{
            $rec = $this->model->where('CallCode', '=', $entity)->max('Urut');
            $seq = $rec + 1;
        }

        if($seq){
            return response()->json([
                'result'=>'OK',
                'entity'=>$entity,
                'seq'=>$seq,
                'padded'=> str_pad($seq, $padding , '0', STR_PAD_LEFT )
            ]);

        }else{
            return response()->json([
                'result'=>'ERR',
                'msg'=>'NOENTITY'
            ]);
        }


    }

    public function getScan(Request $request)
    {
        $this->nav_section = 'users';
        $this->res_path = 'models/controllers/dwf';
        $this->yml_file = 'scanin_controller';

        $this->nav_file = 'nav';
        $this->nav_path = 'views/partials/app/dwf';
        $this->yml_layout_file = 'op_layout';
        $this->logo = env('APP_LOGO');

        $this->title = 'Scan In';
        $this->has_tab = false;

        $this->show_title = false;

        $this->add_url = 'clinic/operasi/add';

        $this->update_url = 'clinic/operasi/relay';

        $this->autosave_url = 'clinic/operasi/autosave';

        $this->localStorageKey = 'SC_'.date('Ymd', time()).'_'.Auth::user()->cliCode;

        $this->item_id = 'scanner';

        $this->form_view = 'form.htmlpage';

        $this->form_type = 'html';

        $this->form_layout = 'dwf.repository.scanlayout';

        $this->form_mode = 'edit';

        $this->can_autosave = false;

        $this->can_add = false;

        $this->can_print = true;

        $this->print_template = 'doc-label';
        $this->print_modal_size = 'md';

        $this->can_lock = false;

        $this->edit_methods_view = 'dwf.repository.scan_methods';
        $this->edit_computed_view = 'dwf.repository.scan_computed';
        $this->edit_watch_view = 'dwf.repository.scan_watch';

        $this->show_print_button = true;

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        $formOptions['docListItemTemplate'] = '`'.file_get_contents( resource_path('views/dwf/repository/item_template.html') ).'`';
        $formOptions['scanResult'] = '{}';

        $formOptions['DocBaseName'] = '``';
        $formOptions['DocBase'] = '``';
        $formOptions['DocPath'] = '``';

        $this->aux_data = $formOptions;

        return parent::formGenerator();
    }

    public function postScan(Request $request)
    {
        $q = $request->get('q');
        $aux = $request->all();

        $name = $aux['aux'] ?? 'docname';

        $fileUtil = new FileUtil();

        $srcpath = env('DEFAULT_SCANTEMP_DIR');

        $file = explode('/', $name);

        $file = array_pop($file);

        $mode = 'move';

        $result = $fileUtil->linkFile(trim($q), $file, $srcpath, $mode  );

        if($result){
            return response()->json([
                'result'=>'OK',
                'data'=>['name'=> $name ]
            ]);
        }else{
            return response()->json([
                'result'=>'NOK',
                'message'=>'Document not found',
                'data'=>['name'=> $name ]
            ]);

        }
    }

    public function postScanLink(Request $request)
    {
        $sourceDir = $request->get('sourceDir');
        $scanMode = $request->get('scanMode');

        $exitCode = Artisan::call('doc:scanlink', [
            '--dir'=> $sourceDir, '--mode' => $scanMode
        ]);

        if($exitCode == 0){
            return response()->json(['result'=>'OK']);
        }else{
            return response()->json(['result'=>'ERR']);
        }

    }

    public function additionalQuery($model, Request $request)
    {
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        $model = $model->orderBy('updated_at','desc');
        return $model;
    }

    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        return parent::beforeSave($data);
    }

    protected function rowPostProcess($row)
    {
        /* modify or add new fields */
        //$row['linkConsult'] = url('clinic/patient/km/'.$row['_id']);
        //$row['linkOp'] = url('clinic/patient/op/'.$row['_id']);

        return parent::rowPostProcess($row);
    }

    public function beforeImportCommit($data)
    {
        $data['IODate'] = ImportUtil::excelDateToNormal($data['IODate']);
        $data['DocDate'] = ImportUtil::excelDateToNormal($data['DocDate']);
        $data['RetDate'] = ImportUtil::excelDateToNormal($data['RetDate']);
        $data['DispDate'] = ImportUtil::excelDateToNormal($data['DispDate']);
        $data['ExpDate'] = ImportUtil::excelDateToNormal($data['ExpDate']);

        $data['Status'] = $data['Status'] ?? 'Active';

        return parent::beforeImportCommit($data); // TODO: Change the autogenerated stub
    }


}
