<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Halal;

use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Helpers\RefUtil;
use App\Helpers\Injector;
use App\Http\Controllers\Core\AdminController;
use App\Models\Halal\HalalCertification;
use App\Models\Halal\BizProfile;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class HalalCertificationController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/halal';

        $this->yml_file = 'halalcertification_controller';

        $this->entity = 'Halal Certification';

        $this->auth_entity = 'halal-certification';

        $this->controller_base = 'halal/halal-certification';

        $this->view_base = 'halal.halalcertification';

        $this->model = new HalalCertification();

        /**
         * TODO
         *
         * tambahkan

         * Penyelia Halal
         *
         * Nama
         * No KTP
         * No Sertifikat Diklat
         * Tgl Sertifikat
         * No. SK Penetapan Penyelia Halal
         */

    }

    public function getIndex()
    {
        $this->title = 'Halal Certification';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
        * Set form layout
        */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.halalcertification.form_layout';
        $this->form_dialog_size = 'xl';

        /**
        * Set Viewer layout
        */
        $this->viewer_layout = 'halal.halalcertification.view_layout';
        $this->viewer_dialog_size = 'xl';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->add_as_page = false;
        $this->edit_as_page = false;
        $this->with_advanced_search = false;
        $this->update_title_fields = '"<h4>'.__('Ubah')." ".'" + this.productName + "</h4>"';
        $this->view_title_fields = '"<h4>'.__('Lihat')." ".'" + this.productName + "</h4>"';

        $this->add_filler = false;

        return parent::getIndex();
    }

    public function getList(Request $request, $keyword0, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Halal Certification').' : '.__(Str::headline($keyword0));

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
         * Set form layout
         */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.halalcertification.form_layout';
        $this->form_dialog_size = 'lg';

        /**
         * Set Viewer layout
         */
        $this->viewer_layout = 'halal.halalcertification.view_layout';
        $this->viewer_dialog_size = 'lg';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->add_as_page = false;
        $this->edit_as_page = false;
        $this->with_advanced_search = false;
        $this->update_title_fields = '"<h4>'.__('Ubah')." ".'" + this.productName + "</h4>"';
        $this->view_title_fields = '"<h4>'.__('Lihat')." ".'" + this.productName + "</h4>"';

        $this->add_filler = false;

        return parent::getList($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }


    public function setupInjector($uiOptions, $data = null)
    {
        $uiOptions = Injector::setObject('bom') // name variable / field yang akan diinject
        ->setObjFields( // mwnambahkan setting field untuk table
            [
                [ 'label'=>'Nama Bahan', 'key'=>'material', 'class'=>'text-100' , 'type'=>'String' , 'validator'=>'required'  ],
                [ 'label'=>'Merek Produk', 'key'=>'materialBrand', 'class'=>'text-200', 'type'=>'String', 'validator'=>'required'  ],
                [ 'label'=>'Produsen', 'key'=>'producer', 'class'=>'text-150', 'type'=>'String' , 'validator'=>''  ],
                [ 'label'=>'Nomor Sertifikat Halal', 'key'=>'halalCertNo', 'class'=>'text-75 text-center', 'type'=>'string', 'validator'=>'required'  ],
                [ 'label'=>'Masa Berlaku Sertifikasi Halal', 'key'=>'halalCertValidUntil', 'class'=>'text-75 text-center', 'type'=>'String' , 'validator'=>'required'  ]
            ]
        )->setObjDef( // set object default
            [
                'material'=>'',
                'materialBrand'=>'',
                'producer'=>'',
                'halalCertNo'=> '',
                'halalCertValidUntil'=>''
            ]
        )->setObjParams(
            [
                // 'uom' => $formOptions['uomOptions'] = RefUtil::toOptions(RefUtil::getUom(),'uom','uom', false),
            ]
        )
        ->setObjTemplate(view('halal.halalproduct.bom')->render()) // set template
        ->injectObject($uiOptions);
        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        $formOptions['certificationStatusOptions'] = [[ 'value'=> 'Draft', 'text'=> 'Draft' ],[ 'value'=> 'Dalam Proses', 'text'=> 'Dalam Proses'],[ 'value'=> 'Final', 'text'=> 'Final']];

        $formOptions['businessRefOptions'] = RefUtil::toOptions(RefUtil::getBizBusiness(),'bizRegisteredName','bizRegisteredName', false);

        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }

    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add').' '.$this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.halalcertification.form_layout';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $item = $this->model->find($id);

        $this->item_id = $item->_id;

        $this->title = __('Edit').' '.$item->productName;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.halalcertification.form_layout';

        $this->runAcl();
        $this->runUrlSet('edit');
        $this->runPageViewSet('edit');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getView(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        return parent::getView($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function postClone(Request $request)
    {
        $this->revision_key = 'requestNo';
        return parent::postClone($request);
    }
    public function postIndex(Request $request)
    {
//        $this->defOrderField = 'Item';
//        $this->defOrderDir = 'asc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );

        if($request->has('keywords')){
            $k = $request->get('keywords');
            if($k['keyword0'] == 'draft'){
                $model = $model->where('certificationStatus','=', 'Draft' );
            }
        }

        if($request->has('keywords')){
            $k = $request->get('keywords');
            if($k['keyword0'] == 'in-progress'){
                $model = $model->where('certificationStatus','=', 'Dalam Proses' );
            }
        }

        if($request->has('keywords')){
            $k = $request->get('keywords');
            if($k['keyword0'] == 'certified'){
                $model = $model->where('certificationStatus','=', 'Final' );
            }
        }

        return parent::additionalQuery($model, $request); // TODO: Change the autogenerated stub
    }

    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        return parent::beforeSave($data);
    }

    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {

        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }
    public function postGetSeq(Request $request)
    {

        $businessRef = $request->get('businessRef');

        $trd = BizProfile::where('bizRegisteredName', '=', $businessRef)
            ->first();
        //$trade = $trd->each->makeHidden(['_id']);
        // $trade1 = $trade->select(['bizTradeMark']);


        $adr = BizProfile::select('bizAddress')
            ->where('bizRegisteredName', '=', $businessRef)
            ->first();
        //$address = $adr->each->makeHidden(['_id']);

        if($trd){
            return response()->json([
                'result'=>'OK',
                'tradeMark'=>$trd->bizTradeMark ?? '',
                'address'=>$trd->bizAddress ?? ''
            ]);

        }else{
            return response()->json([
                'result'=>'ERR',
                'msg'=>'NOENTITY'
            ]);
        }


    }

}
