<?php

/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */

namespace App\Http\Controllers\Halal;

use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Helpers\Injector;
use App\Http\Controllers\Core\AdminController;
use App\Models\Halal\FundingRequest;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
// use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Storage;
use Carbon\Carbon;
use App\Helpers\RefUtil;


class FundingRequestController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/halal';

        $this->yml_file = 'fundingrequest_controller';

        $this->entity = 'Funding Request';

        $this->auth_entity = 'funding-request';

        $this->controller_base = 'halal/funding-request';

        $this->view_base = 'halal.fundingrequest';

        $this->model = new FundingRequest();
    }

    public function getIndex()
    {
        $this->title = 'Funding Request';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
         * Set form layout
         */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.fundingrequest.form_layout';
        $this->form_dialog_size = 'lg';

        /**
         * Set Viewer layout
         */
        $this->viewer_layout = 'halal.fundingrequest.view_layout';
        $this->viewer_dialog_size = 'lg';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->add_as_page = true;
        $this->edit_as_page = true;
        $this->can_approve = false;
        $this->add_filler = false;
        // $this->item_data_url = 'halal/funding-request/get-status';

        $this->extra_query = [
            'typeOfFunding' => '',
        ];


        return parent::getIndex();
    }

    public function setupInjector($uiOptions, $data = null)
    {
        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        $biz = [
            '_id',
            'bizRegisteredName',
            'bizTradeMark',
            'bizIdType',
            'bizCompanyType',
            'bizAddress',
            'bizType',
            'bizPicName',
            'bizPicPosition',
            'bizPicEmail',
            'contactWA',
        ];
        $formOptions['bizRegisteredNameOptions'] = RefUtil::toOptions(RefUtil::getBizProfile(), 'bizRegisteredName', '_object', true);
        // $formOptions['bizRegisteredNameOptions'] = RefUtil::toOptions(RefUtil::getBizProfile(), 'bizRegisteredName', 'bizRegisteredName', false);

        $formOptions['bizRegisteredNameObjectMap'] = RefUtil::toObjectMap(RefUtil::getBizProfile(), 'bizRegisteredName', $biz);
        $formOptions['typeOfFundingOptions'] = RefUtil::toOptions(RefUtil::getJenisPendanaan(), 'jenispendanaan', 'jenispendanaan', false);

        $formOptions['approvalDetailTemplate'] = '`' . view('halal.fundingrequest.approvaldetail')->render() . '`';
        $formOptions['approvalDetail'] = "{}";

        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }
    public function setupApprovalParams($formOptions)
    {
        $formOptions['approvalDetailTemplate'] = '`' . view('halal.fundingrequest.approvaldetail')->render() . '`';
        $formOptions['approvalDetail'] = "{}";

        $formOptions['docHistory'] = [];
        $formOptions['docHistoryTitle'] = '""';
        return $formOptions;
    }


    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add') . ' ' . $this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.fundingrequest.form_layout';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge($uiOptions, $formOptions);

        $this->page_redirect_after_save = true;

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $item = $this->model->find($id);

        $this->item_id = $item->_id;

        $this->title = __('Edit') . ' ' . $item->_id;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.fundingrequest.form_layout';

        $this->runAcl();
        $this->runUrlSet('edit');
        $this->runPageViewSet('edit');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge($uiOptions, $formOptions);

        $this->page_redirect_after_save = true;

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getView(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        return parent::getView($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function postClone(Request $request)
    {
        $this->revision_key = 'requestNo';
        return parent::postClone($request);
    }

    public function postIndex(Request $request)
    {
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        $adv = $request->get('advancedSearch') ?? false;
        $ext = $request->get('extraData') ?? false;
        if ($adv && $ext &&  (isset($adv['enable']) && $adv['enable']) && $adv['isOpen']) {
            // query hanya dilakukan jika advanced search aktif dan panel terbuka
            $model = $this->advQuery($model, $ext);
        }
        if ($request->has('keywords')) {
            $k = $request->get('keywords');
            if ($k['keyword0'] == 'approved') {
                $model = $model->where('approvalStatus', '=', 'APPROVED');
            }
        }
        if ($request->has('keywords')) {
            $k = $request->get('keywords');
            if ($k['keyword0'] == 'paid-off') {
                $model = $model->where('approvalStatus', '=', 'PAID');
            }
        }
        return $model;
    }

    public function advQuery($model, $ext)
    {
        if (isset($ext['typeOfFunding']) && $ext['typeOfFunding'] != '') {
            $model = $model->where('typeOfFunding', '=', $ext['typeOfFunding']);
        }
        return $model;
    }

    public function beforeSave($data)
    {
        $data['approvalStatus'] = "NEW";
        $today = Carbon::now()->toDateTimeString();
        $name = Auth::user()->name;
        $decisionList = array();
        array_push(
            $decisionList,
            array(
                'createdAt' => $today,
                'changeRemarks' => 'Funding Request is created',
                'changeStatusTo' => 'NEW',
                'changeTo' => 'NEW',
                'signType' => 'none',
                'actorName' => $name,
                'decideAs' => 'none'
            )
        );
        $data['decisionList'] = $decisionList;
        return parent::beforeSave($data);
    }

    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {

        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    public function approvalItemQuery($model, Request $request)
    {
        $model = $model->where('requestByObj.value.email', '=', Auth::user()->email)
            ->orWhere('authorizedByObj.value.email', '=', Auth::user()->email)
            ->orWhere('auditedByObj.value.email', '=', Auth::user()->email)
            ->orWhere('recomendedByObj.value.email', '=', Auth::user()->email);

        return parent::approvalItemQuery($model, $request); // TODO: Change the autogenerated stub
    }

    public function approvalItemTransform($items)
    {
        $its = [];
        foreach ($items as $item) {
            $item['approvalTitle'] = $item['requestNo'] ?? '-';
            $item['approvalDescription'] = $item['purposeOfPurchase'] ?? '-';

            $as = '';
            $sign = false;
            $initial = false;
            if ($item['reviewedBy1'] == Auth::user()->_id) {
                $as = 'reviewedBy1';
                $initial = true;
            }
            if ($item['reviewedBy2'] == Auth::user()->_id) {
                $as = 'reviewedBy2';
                $initial = true;
            }
            if ($item['requestBy'] == Auth::user()->_id) {
                $as = 'requestBy';
                $sign = false;
            }
            if ($item['recomendedBy'] == Auth::user()->_id) {
                $as = 'recomendedBy';
                $sign = true;
            }
            if ($item['auditedBy'] == Auth::user()->_id) {
                $as = 'auditedBy';
                $sign = true;
            }
            if ($item['authorizedBy'] == Auth::user()->_id) {
                $as = 'authorizedBy';
                $sign = true;
            }

            $item['decideAs'] = $as;
            $item['needSigning'] = $sign;
            $item['needReview'] = $initial;
            $its[] = $item;
        }

        $items = $its;

        return parent::approvalItemTransform($items); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {
        /* modify or add new fields */
        //$row['linkConsult'] = url('clinic/patient/km/'.$row['_id']);
        //$row['linkOp'] = url('clinic/patient/op/'.$row['_id']);

        $as = 'authorizedBy';
        $initial = false;
        $showpad = true;
        $approverName = Auth::user()->name;
        $changeDate = Carbon::now(env('DEFAULT_TIME_ZONE'))->toDateTimeString();
        $sign = true;
        $showpad = false;

        $row['decideAs'] = $as;
        $title = $row['requestNo'] ?? "Funding Request";
        $row['decideAsTitle'] = $title;
        // $row['decideAsTitle'] = \Illuminate\Support\Str::headline($as);
        // $row['needSigning'] = $sign;
        $row['needReview'] = $initial;
        $row['showSignPad'] = $showpad;
        $row['approverName'] = $approverName;
        $row['changeDate'] = $changeDate;
        // if ($row['approvalStatus'] == 'APPROVED') {
        //     $row['needSigning'] = $sign;
        // }

        return parent::rowPostProcess($row);
    }
    public function getList(Request $request, $keyword0, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Funding Request') . ' : ' . __(Str::headline($keyword0));

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
         * Set form layout
         */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.fundingrequest.form_layout';
        $this->form_dialog_size = 'lg';

        /**
         * Set Viewer layout
         */
        $this->viewer_layout = 'halal.fundingrequest.view_layout';
        $this->viewer_dialog_size = 'lg';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->add_as_page = true;
        $this->edit_as_page = true;

        $this->add_filler = false;

        return parent::getList($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }
    public function postGetStatus(Request $request)
    {
        // mengambil data jobno, trigger untuk total
        $requiredFunding = (int)$request->get('requiredFunding');

        $today =  Carbon::now()->format('Ymd');
        // $cluster = Auth::user()->cluster ?? 'none';
        $frPrefix = $today;

        return response()->json([
            'result' => 'OK',
            'frPrefix' => $frPrefix,
            'frType' => 'FR',
            'requestName' => Auth::user()->name ?? '',
            // 'cluster' => $cluster ?? '',
        ]);
    }
}
