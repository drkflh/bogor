<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Halal\Profiles;

use App\Helpers\App\DwfUtil;
use App\Helpers\App\MmsUtil;
use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\RefUtil;
use App\Helpers\Util;
use App\Helpers\Injector;
use App\Helpers\WorkflowUtil;
use App\Http\Controllers\Core\AdminController;
use App\Models\Core\Mongo\Role;
use App\Models\Halal\BizProfile;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;

class PenerbitController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/halal/profiles';

        $this->yml_file = 'penerbit_profile_controller';

        $this->entity = 'Investee Profile';

        $this->auth_entity = 'biz-profile';

        $this->controller_base = 'halal/profile/penerbit';

        $this->view_base = 'halal.profiles.penerbit';

        $this->model = new User();
    }

    public function getIndex()
    {
        $this->title = 'Profil Penerbit';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
        * Set form layout
        */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.profiles.penerbit.form_layout';
        $this->form_dialog_size = 'lg';

        /**
        * Set Viewer layout
        */
        $this->viewer_layout = 'halal.profiles.penerbit.view_layout';
        $this->viewer_dialog_size = 'lg';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->can_upload = false;
        $this->can_download_csv = false;
        $this->can_download_xls = false;

        $this->add_as_page = true;
        $this->edit_as_page = true;

        $this->add_page_base = $this->controller_base.'/step/1';
        $this->edit_page_base = $this->controller_base.'/step/';

        $this->add_filler = false;
        $this->view_title_fields = 'this.bizRegisteredName';

        $this->with_advanced_search = false;

        return parent::getIndex();
    }

    public function getStep(Request $request, $step = 1, $id = null, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __($this->entity);

        /* Use custom form layout */
        $step = $step ?? 1;

        $id = $id ?? Auth::user()->_id;

        $formlayout = 'halal.profiles.penerbit.step_'.$step;

        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = $formlayout;

        $this->page_class = 'col-lg-8 col-md-12 col-xs-12';

        $this->form_mode = 'edit';

        $mode = $this->form_mode;

        $this->runAcl();
        $this->runUrlSet($mode);
        $this->runPageViewSet($mode);

        $this->non_closing_save = true;

        $this->page_redirect_after_save = false;

        $this->current_step = $step;
        $this->num_step_page = 4;
        $this->step_progress = [
            [
                'title'=>'Info Usaha',
                'description'=>'Informasi Usaha',
                'active'=>( $this->current_step >= 1 )
            ],
            [
                'title'=>'Lampiran',
                'description'=>'Dokumen Usaha',
                'active'=>( $this->current_step >= 2 )
            ],
            [
                'title'=>'Info Finansial',
                'description'=>'Informasi Keuangan & Lampiran',
                'active'=>( $this->current_step >= 3 )
            ],
            [
                'title'=>'Selesai',
                'description'=>'Informasi Tambahan',
                'active'=>( $this->current_step >= 4 )
            ],
        ];

        return parent::getStep($request, $step, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }


    public function setupInjector($uiOptions, $data = null)
    {
        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        $formOptions['roleIdOptions'] = Util::toSelectOptions(new Role(), true, 'rolename', '_id');
        $formOptions['provinceOptions'] = RefUtil::toOptions(RefUtil::getProvince(),'provinceName','provinceName', false);
        $formOptions['companyNameOptions'] = RefUtil::toOptions(WorkflowUtil::getClient(),'companyName','companyName', false);
        $formOptions['statusEmployeeOptions'] = config('util.employee_status');
        $formOptions['genderOptions'] = [[ 'value'=> 'L', 'text'=> 'L' ],[ 'value'=> 'P', 'text'=> 'P']];

        $formOptions['jobObjectOptions'] = DwfUtil::toOptions( DwfUtil::getTitleCode(), ['jobCode','jobTitle'], '_object', false ) ;

        $formOptions['bizUnitOptions'] = RefUtil::toOptions( RefUtil::getBizUnit(), ['bizUnitCode','bizUnitName'], 'bizUnitCode', true ) ;

        $formOptions['notificationSubsOptions'] = RefUtil::toOptions( MmsUtil::getNotificationTemplates(), ['slug', 'description'], '_object', false ) ;

        $formOptions['idTypeOptions'] = [[ 'value'=> 'KTP', 'text'=> 'KTP' ],[ 'value'=> 'SIM', 'text'=> 'SIM'],[ 'value'=> 'KITAS', 'text'=> 'KITAS'],[ 'value'=> 'PASSPORT', 'text'=> 'PASSPORT']];

        $formOptions['kabupatenOptions'] = RefUtil::toGroupOptions2( RefUtil::getKabupaten() , 'kabupatenName', 'kabupatenName', 'provinceName', true );
        $formOptions['relativeKabupatenOptions'] = RefUtil::toGroupOptions2( RefUtil::getKabupaten() , 'kabupatenName', 'kabupatenName', 'provinceName', true );

        $formOptions['kabupatenObjectOptions'] = RefUtil::toGroupOptions2( RefUtil::getKabupaten() , 'kabupatenName', '_object', 'provinceName', true );

        $formOptions['relativeKabupatenObjectOptions'] = RefUtil::toGroupOptions( RefUtil::getKabupaten() , 'kabupatenName', '_object', 'provinceName', true );

        $formOptions['bizCompanyTypeOptions'] = RefUtil::toOptions(RefUtil::getCompanyTypes(),'companyType','companyType', false);
        $formOptions['bizIdTypeOptions'] = [
            ['text'=>'NIB', 'value'=>'NIB'],
            ['text'=>'NIK', 'value'=>'NIK']
        ];

        $kmap = [
            '_id',
            'kabupatenCode',
            'kabupatenName',
            'provinceCode',
            'provinceName'
        ];

        $formOptions['kabupatenObjectMap'] = RefUtil::toObjectMap( RefUtil::getKabupaten() , 'kabupatenName', $kmap );

        $formOptions['kecamatanOptions'] = [];

        $formOptions['kelurahanOptions'] = [];

        $formOptions['cityOptions'] = [];

        $formOptions['new_password'] = '""';
        $formOptions['new_confirm_password'] = '""';
        $formOptions['new_pin'] = '""';
        $formOptions['new_confirm_pin'] = '""';

        $formOptions['mobileCountryOptions'] = config('util.mobile_countries');
        $formOptions['relativeMobileCountryOptions'] = config('util.mobile_countries');

        $formOptions['minDob'] = Carbon::now( env('DEFAULT_TIME_ZONE'))->subYears(17)->endOfYear()->toDateString();

        $this->entity = $this->title;


        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }

    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __($this->entity);

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.profiles.penerbit.step_1';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        $this->page_class = 'col-lg-6 col-md-10 col-xs-12';

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $item = $this->model->find($id);

        $this->item_id = $item->_id;

        $this->title = __('Edit').' '.$this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'halal.profiles.penerbit.step_1';

        $this->runAcl();
        $this->runUrlSet('edit');
        $this->runPageViewSet('edit');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        $this->page_class = 'col-lg-6 col-md-10 col-xs-12';

        $this->bottom_action = true;

        $this->save_button_label = 'Next';

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getView(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->view_title_fields = $this->entity;

        $item = $this->model->find($id);

        $this->item_id = $item->_id;

        $this->title = __('View').' '.$this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->viewer_layout = 'halal.profiles.penerbit.view_layout';

        $this->runAcl();
        $this->runUrlSet('view');
        $this->runPageViewSet('view');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);
        return parent::getView($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function postClone(Request $request)
    {
        $this->revision_key = 'requestNo';
        return parent::postClone($request);
    }

    public function postIndex(Request $request)
    {
//        $this->defOrderField = 'Item';
//        $this->defOrderDir = 'asc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        if( AuthUtil::isAdmin() ){

        }else{
            $model = $model->where('ownerId', '=', Auth::user()->_id );
        }
        return $model;
    }

    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        return parent::beforeSave($data);
    }

    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {

        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }

}
