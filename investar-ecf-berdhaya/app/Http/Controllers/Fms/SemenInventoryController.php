<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Fms;

use App\Helpers\App\FmsUtil;
use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Http\Controllers\Core\AdminController;
use App\Models\Fms\Farm;
use App\Models\Fms\SemenInventory;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;

class SemenInventoryController extends AdminController

{
    var $farms = [];

    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/fms';

        $this->yml_file = 'semeninventory_controller';

        $this->entity = 'Semen Inventory';

        $this->auth_entity = 'fms-semen-inventory';

        $this->controller_base = 'fms/semen-inventory';

        $this->view_base = 'fms.semeninventory';

        $this->model = new SemenInventory();
    }

    public function getIndex()
    {
        $this->title = 'Semen Inventory';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
        * Set form layout
        */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'fms.semeninventory.form_layout';
        $this->form_dialog_size = 'md';

        /**
        * Set Viewer layout
        */
        $this->viewer_layout = 'fms.semeninventory.view_layout';
        $this->viewer_dialog_size = 'md';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->print_template = 'data-card';
        $this->title_fields = 'farmNo';
        $this->pdf_title_fields = 'farmNo';

        return parent::getIndex();
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        $masterId = Auth::user()->masterId ?? '';

        $formOptions['farmIdOptions'] = FmsUtil::toOptions( FmsUtil::getFarms( Auth::user()->_id ), 'farmName', '_id', true ) ;
        $formOptions['farmObjectOptions'] = FmsUtil::toOptions( FmsUtil::getFarms( $masterId ), 'farmName', '_object', AuthUtil::isAdmin() ) ;
        $formOptions['breedOptions'] = FmsUtil::toOptions( FmsUtil::getBreeds(), 'breed', 'breed', false ) ;

        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }


    public function additionalQuery($model, Request $request)
    {
        if(AuthUtil::isAdmin() || AuthUtil::is('owner')){
            $model = $model->where('masterId','=', Auth::user()->_id );

        }

        if(AuthUtil::is('owner')){
            $model = $model->where(function($q){
                $q->where('access', '=', 'public')
                    ->orWhere(function ($qx){
                        $qx->where('masterId','=', Auth::user()->_id)
                            ->where('access','=','private');
                    });
            });
        }

        if( AuthUtil::is('field-officer') || AuthUtil::is('farm-admin')){
            $farmId = '';
            if( isset(Auth::user()->bizUnitId) ){
                $model = $model->where('farmId','=', Auth::user()->bizUnitId );

                $model = $model->where(function($q){
                    $q->where('access', '=', 'public')
                        ->orWhere(function($qx){
                            $qx->where('farmId','=', Auth::user()->bizUnitId)
                                ->where('access','=','private');
                        });
                });

            }else if(isset(Auth::user()->masterId) ){
//                $model = $model->where('masterId','=', Auth::user()->masterId );

                $model = $model->where(function($q){
                    $q->where('access', '=', 'public')
                        ->orWhere(function ($qx){
                            $qx->where('masterId','=', Auth::user()->masterId)
                                ->where('access','=','private');
                        });
                });
            }else{
//                $model = $model->where('masterId','=', Auth::user()->_id );

                $model = $model->where(function($q){
                    $q->where('access', '=', 'public')
                        ->orWhere(function ($qx){
                            $qx->where('masterId','=', Auth::user()->_id)
                                ->where('access','=','private');
                        });
                });
            }


        }

        return parent::additionalQuery($model, $request); // TODO: Change the autogenerated stub
    }


    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {

        if(is_null($data['officerId']) || $data['officerId'] == ''){
            $data['officerId'] = Auth::user()->_id;
        }

        if(is_null($data['officerName']) || $data['officerName'] == ''){
            $data['officerName'] = Auth::user()->name;
        }

        if(AuthUtil::isAdmin()){
            $data['access'] = 'public';
        }else{
            $data['access'] = 'private';
        }

        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function beforeSave($data)
    {
        if(AuthUtil::isAdmin()){
            $data['access'] = 'public';
        }else{
            $data['access'] = 'private';
        }
        return parent::beforeSave($data); // TODO: Change the autogenerated stub
    }


    public function getParam()
    {

        $this->def_param['farmId'] = Auth::user()->bizUnitId ?? '';
        $this->def_param['officerId'] = Auth::user()->_id;
        $this->def_param['officerName'] = Auth::user()->name;
        $this->def_param['checkDate'] = date('Y-m-d H:i:s', time());

        if(AuthUtil::is('owner')){
            $selFarms = Farm::where('masterId','=',Auth::user()->_id)->first();
            $farmId = $selFarms->_id;
        }else{
            $farmId = Auth::user()->bizUnitId;
        }

        if(AuthUtil::isAdmin()){
            $selFarms = Farm::orderBy('farmNo','asc')->first();
            $farmId = $selFarms->_id;
        }

        $this->def_param['farmObject'] = FmsUtil::getFarmObject( $farmId );

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    public function postIndex(Request $request)
    {

        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }

}
