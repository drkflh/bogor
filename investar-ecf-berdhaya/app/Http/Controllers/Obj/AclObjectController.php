<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Obj;

use App\Helpers\Util;
use App\Http\Controllers\Core\AdminController;
use App\Models\Obj\AclObject;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class AclObjectController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/obj/acl_object';
        $this->yml_file = 'acl_object_controller';

        $this->entity = 'ACL Object';

        $this->auth_entity = 'acl-object';

        $this->controller_base = 'obj/acl-object';

        $this->view_base = 'obj.aclobject';

        $this->model = new AclObject();
    }

    public function getIndex()
    {
        $this->title = 'ACL Object';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);

        $this->viewer_layout = 'obj.aclobject.formlayout';

        $this->form_view = 'form.html'; // use plain htmla
        $this->form_layout = 'obj.aclobject.formlayout';
        $this->form_dialog_size = 'xl';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();

        $this->can_clone = true;

        $this->can_approve = false;
        $this->can_revise = false;
        $this->can_request_approval = false;
        $this->runMoreMenu();

        $this->with_workflow = false;
        $this->with_revision = false;

        $this->table_grouped = true;

        $this->add_filler = false;

        $this->add_title_fields = '"<h4> '.__('Add').' '.$this->entity.'</h4>"';
        $this->view_title_fields = '"<h4> View"  + " " + this.objectName + "</h4>"';
        $this->update_title_fields = '"<h4> Update" +  " " + this.objectName + "</h4>"';

        return parent::getIndex();
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        $formOptions['textMatchModeOptions'] = config('app.params.textEqualityOperator');
        $formOptions['textMatchDirOptions'] = config('app.params.textMatchDirection');
        $formOptions['checkMethodOptions'] = [
            ['text'=>'BooleanCheck', 'value'=>'BooleanCheck'],
            ['text'=>'TextMatcher', 'value'=>'TextMatcher'],
        ];

        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }


    public function postIndex(Request $request)
    {
        $this->defOrderField = 'group';
        $this->defOrderDir = 'asc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        $model = $model->orderBy('objectName','asc');
        return parent::additionalQuery($model, $request); // TODO: Change the autogenerated stub
    }


    public function getAuto(Request $request)
    {
        $this->model = new Role();
        $this->yml_file = 'fields';
        $this->res_path = 'views/core/role';
        return parent::getAuto($request); // TODO: Change the autogenerated stub
    }


    public function postDlxl(Request $request)
    {
        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);

        return parent::postDlxl($request); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {
        $this->def_param['standardCrud'] = true;
        $this->def_param['lookupTo'] = 'Config';
        $this->def_param['checkMethod'] = 'BooleanCheck';
        $this->def_param['lookupParam'] = 'acl.crud';
        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    public function externalData($data, $request)
    {
        $temp = [];

        for($i = 0; $i < count($data); $i++ ){
            if(isset($data[$i]['group'])){
                $label = $data[$i]['group'];
                $temp[ $label ][] = $data[$i];
            }else{
                $temp[ 'Ungrouped' ][] = $data[$i];
            }
        }

        $out = [];
        foreach($temp as $k=>$v){
            $out[] = [
                'label'=>$k,
                'mode'=>'span',
                'children'=>$v
            ];
        }

        return $out;
    }


}
