<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Obj;

use App\Helpers\AuthUtil;
use App\Helpers\Util;
use App\Http\Controllers\Core\AdminController;
use App\Models\Obj\JsonTemplate;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class JsonTemplateController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'views/obj/jsontemplate';
        $this->yml_file = 'fields';

        $this->entity = 'JSON Template';
        $this->auth_entity = 'json-template';
        $this->controller_base = 'obj/json-template';
        $this->view_base = 'obj.jsontemplate';

        $this->model = new JsonTemplate();
    }

    /**
     * @hideFromAPIDocumentation
     * @return mixed
     */
    public function getIndex()
    {
        $this->title = 'JSON Template';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);


        $this->template_var = [ 'hasSideNav'=>true ];

        $this->runUrlSet();
        $this->runAcl();
        $this->runViewSet();

        $this->can_clone = true;

        $this->show_title = true;

        $this->viewer_layout = 'obj.printtemplate.formlayout';

        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'obj.jsontemplate.formlayout';
        $this->form_dialog_size = 'fs';

        $this->table_slot_view = 'obj.jsontemplate.tableslot';

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();
        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->view_title_fields = 'this.title';

        $this->non_closing_save = true;
        //$this->table_component = 'ant-vue-table';

        return parent::getIndex();
    }

    public function additionalQuery($model, Request $request)
    {
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        return $model;
    }

    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        return parent::beforeSave($data);
    }

    protected function rowPostProcess($row)
    {
        /* modify or add new fields */
        //$row['linkConsult'] = url('clinic/patient/km/'.$row['_id']);
        //$row['linkOp'] = url('clinic/patient/op/'.$row['_id']);

        return parent::rowPostProcess($row);
    }

    // Transform fields before commited into the database collection ( xls import )
    public function beforeImportCommit($data)
    {
        //example : transform imported data to datetime field
        // $data['IODate'] = ImportUtil::excelDateToNormal($data['IODate']);
        // $data['DocDate'] = ImportUtil::excelDateToNormal($data['DocDate']);
        // $data['RetDate'] = ImportUtil::excelDateToNormal($data['RetDate']);
        // $data['DispDate'] = ImportUtil::excelDateToNormal($data['DispDate']);
        $data['version'] = config('dbversions.product_categories');
        return parent::beforeImportCommit($data); // TODO: Change the autogenerated stub
    }


    public function beforeUpdate($id, $data)
    {
        $data['version'] = config('dbversions.product_categories');
        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }
}
