<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Mms;

use App\Helpers\App\QontakUtil;
use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\RefUtil;
use App\Helpers\Util;
use App\Helpers\Injector;
use App\Http\Controllers\Core\AdminController;
use App\Models\Mms\NotificationTemplate;
use App\Models\Core\Mongo\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class NotificationTemplateController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/mms';

        $this->yml_file = 'notificationtemplate_controller';

        $this->entity = 'Notification Template';

        $this->auth_entity = 'notification-template';

        $this->controller_base = 'mms/notification-template';

        $this->view_base = 'mms.notificationtemplate';

        $this->model = new NotificationTemplate();
    }

    public function getIndex()
    {
        $this->title = 'Notification Template';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
        * Set form layout
        */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'mms.notificationtemplate.form_layout';
        $this->form_dialog_size = 'xl';

        /**
        * Set Viewer layout
        */
        $this->viewer_layout = 'mms.notificationtemplate.view_layout';
        $this->viewer_dialog_size = 'xl';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->add_as_page = false;
        $this->edit_as_page = false;

        $this->title_fields = 'title';

        return parent::getIndex();
    }



    public function postQontakTpl( Request $request)
    {

        $entity = $request->get('entity');

        $name = strtolower($entity['slug']);

        $name = str_replace(['-','_', '.'], '', $name);

        $body = $entity['body'];

        $notifTplId = $entity['_id'];

        $qontakUtil = new QontakUtil();

        $res = $qontakUtil->postTemplate( $name, $body );

        //print_r($res);

        if(isset($res['status']) &&  $res['status'] == 'error'  ){
            //print_r($res);
            return response()->json([
                'result'=>'ERR',
                'msg'=>'Submission error, check body format'
            ],200);

        } else if(isset($res['status']) &&  $res['status'] == 'success') {
            $st = $res['data']['data'][0] ?? false;

            if($st){
                $ntpl = $this->model->find($notifTplId);

                if($ntpl){


                    $ntpl->qontakTplId = $st['id'];
                    $ntpl->qontakTplName = $st['name'];
                    $ntpl->qontakTplStatus = $st['status'];
                    $ntpl->qontakTplLast = Carbon::now(env('DEFAULT_TIME_ZONE'));
                    $ntpl->submitted = true;

                    $ntpl->save();
                }
            }
        }



        //print_r($res);
        return response()->json([
            'result'=>'OK',
            'msg'=>'Template Submitted'
        ],200);

    }

    public function getQontakTpl(Request $request)
    {

        $qontakUtil = new QontakUtil();

        $res = $qontakUtil->listTemplate();

        foreach ($res as $tp){
            $tpl = $this->model->where( 'qontakTplId','=', $tp['id'])->first();
            if($tpl){
                $tpl->qontakTplName = $tp['name'];
                $tpl->qontakTplStatus = $tp['status'];
                $tpl->qontakTplLast = Carbon::now(env('DEFAULT_TIME_ZONE'));
                $tpl->save();
            }
        }

        return response()->json([
            'result'=>'OK',
            'msg'=>'Templates Checked'
        ],200);
    }

    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add').' '.$this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'mms.notificationtemplate.form_layout';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $item = $this->model->find($id);

        $this->item_id = $item->_id;

        $this->title = __('Edit').' '.$item->_id;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'mms.notificationtemplate.form_layout';

        $this->runAcl();
        $this->runUrlSet('edit');
        $this->runPageViewSet('edit');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getView(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        return parent::getView($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }


    public function setupInjector($uiOptions, $data = null)
    {

        $uiOptions = Injector::setObject('paramList') // name variable / field yang akan diinject
            ->setObjFields( // mwnambahkan setting field untuk table
                [
                    [ 'label'=>'Key', 'key'=>'paramKey', 'class'=>'text-50' , 'type'=>'String' , 'validator'=>'required'  ],
                    [ 'label'=>'Text', 'key'=>'paramText', 'class'=>'text-200', 'type'=>'String', 'validator'=>'required'  ],
                    [ 'label'=>'Value Field', 'key'=>'paramField', 'class'=>'text-150', 'type'=>'String' , 'validator'=>''  ],
                ]
            )->setObjDef( // set object default
                [
                    'paramKey'=>'',
                    'paramText'=>'',
                    'paramField'=>''
                ]
            )->setObjParams(
                [
                ]
            )
            ->setObjTemplate( view('mms.notificationtemplate.paramlist')->render() ) // set template
            ->injectObject($uiOptions); // inject


        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }


    public function postClone(Request $request)
    {
        $this->revision_key = 'requestNo';
        return parent::postClone($request);
    }

    public function postIndex(Request $request)
    {
//        $this->defOrderField = 'Item';
//        $this->defOrderDir = 'asc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        return $model;
    }

    public function beforeUpdateForm($population)
    {
        $population['paramList'] = $population['paramList'] ?? [];
        $population['attachment'] = $population['attachment'] ?? [];
        $population['sound'] = $population['sound'] ?? [];
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {
        $data['qontakTplLast'] = $data['qontakTplLast'] ?? Carbon::now(env('DEFAULT_TIME_ZONE'));
        $data['submitted'] = false;
        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function beforeSave($data)
    {
        $data['qontakTplLast'] = $data['qontakTplLast'] ?? Carbon::now(env('DEFAULT_TIME_ZONE'));
        $data['submitted'] = false;
        return parent::beforeSave($data); // TODO: Change the autogenerated stub
    }


    public function getParam()
    {

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }

}
