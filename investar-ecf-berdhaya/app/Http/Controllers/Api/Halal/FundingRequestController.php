<?php

namespace App\Http\Controllers\Api\Halal;

use App\Helpers\AuthUtil;
use App\Http\Controllers\Api\Core\ApiAdminController;
use App\Models\Halal\FundingRequest;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class FundingRequestController extends ApiAdminController
{

    public function __construct()
    {
        $this->controller_name = strtolower( str_replace('Controller', '', get_class()) );
        $this->model = new FundingRequest();

        $this->res_path = 'models/db/halal'; // under resources ,ie: resources/models
        $this->yml_file = 'funding_request'; // name of yml ,ie: member.yml
        $this->entity = 'fundingrequest';

    }

    public function additionalQuery($model, Request $request)
    {
        $rolename = AuthUtil::getRoleSlug( $this->auth->roleId );

        if($rolename == 'owner'){
            $model = $model->where('ownerId', '=', $this->auth->_id);
        }
        if($rolename == 'koperasi'){
            $model = $model->where('referralByCode', '=', $this->auth->memberReferralCode);
        }

        return parent::additionalQuery($model, $request); // TODO: Change the autogenerated stub
    }


    public function beforeOutput($data)
    {
        //$data['addOut'] = "ADD BEFORE OUTPUT";
        return parent::beforeOutput($data); // TODO: Change the autogenerated stub
    }


    public function beforeSave($data)
    {
        $data['referralByCode'] = $this->auth->referralByCode ?? '';
        return parent::beforeSave($data); // TODO: Change the autogenerated stub
    }

    public function afterSave($data)
    {
        //$data['afterSave'] = 'AFTER';
        return parent::afterSave($data); // TODO: Change the autogenerated stub
    }

    public function processApprovalData($data, $request)
    {
        $selected = $data['selectedApprovalItems'];

        $idx = 0;
        $decisionListObj = [];
        foreach ($selected as $sel){
//            print $sel['_id']."\r\n";
//            print_r($sel);
            $decision = $sel['decisionList'] ?? [];

            if($data['approvalSignature'] == 'specimen'){
                $data['approvalSignature'] = $this->getSpecimen();
            }

            if($data['approvalInitial'] == 'specimen'){
                $data['approvalInitial'] = $this->getSpecimen('initial');
            }

            $sel['decideAs'] = $data['decideAs'];
            $sign = [
                '_id'=> $this->auth->_id,
                'approvalInitial'=> $data['approvalInitial'],
                'approvalSignature'=> $data['approvalSignature'],
                'changeDate'=> Carbon::now( env('DEFAULT_TIME_ZONE')),
                'changeRemarks'=> $data['changeRemarks'],
                'changeStatusTo'=> $data['changeStatusTo'],
                'currentStatus'=> $data['currentStatus'],
                'signType'=> $data['signType'],
                'decideAs'=> $sel['decideAs']
            ];

            $decision[] = $sign;

            $doc = $this->model->find($sel['_id']);
            if($doc){
                $doc->decisionList = $decision;
                // simple rule to make approval on one final approver ( authorizer )
                if( $sel['decideAs'] == 'authorizedBy' && $data['changeStatusTo'] == 'APPROVED'){
                    $doc->approvalStatus = $data['changeStatusTo'];
                    $doc->revLock = 1;
                }
                $doc->save();
                $decisionListObj[ $sel['_id'] ] = $decisionListObj[ $sel['_id'] ] ?? [];
                $decisionListObj[ $sel['_id'] ] = $sign;
            }

        }

        $data['decisionList'] = $decisionListObj;

        return parent::processApprovalData($data, $request); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {
        /* modify or add new fields */
        //$row['linkConsult'] = url('clinic/patient/km/'.$row['_id']);
        //$row['linkOp'] = url('clinic/patient/op/'.$row['_id']);

        $as = 'authorizedBy';
        $sign = true;
        $initial = true;
        $showpad = true;
        $approverName = $this->auth->name;
        $changeDate = Carbon::now( env('DEFAULT_TIME_ZONE'))->toDateTimeString();

//        if ( isset($row['reviewedBy1']) && ($row['reviewedBy1'] == $this->auth->_id || $row['reviewedBy1'] == $this->auth->name)){
//            $as = 'reviewedBy1';
//            $initial = true;
//            $showpad = true;
//        }
//        if ( isset($row['reviewedBy2']) && ($row['reviewedBy2'] == $this->auth->_id || $row['reviewedBy2'] == $this->auth->name)){
//            $as = 'reviewedBy2';
//            $initial = true;
//            $showpad = true;
//        }
//        if ( isset($row['requestBy']) && ($row['requestBy'] == $this->auth->_id || $row['requestBy'] == $this->auth->name)){
//            $as = 'requestBy';
//            $sign = true;
//            $showpad = false;
//        }
//        if ( isset($row['recommendedBy']) && ($row['recomendedBy'] == $this->auth->_id || $row['recomendedBy'] == $this->auth->name)){
//            $as = 'recomendedBy';
//            $sign = true;
//            $showpad = true;
//        }
//        if ( isset($row['auditedBy']) && ($row['auditedBy'] == $this->auth->_id || $row['auditedBy'] == $this->auth->name)){
//            $as = 'auditedBy';
//            $sign = true;
//            $showpad = true;
//        }
//        if ( isset($row['authorizedBy']) && ($row['authorizedBy'] == $this->auth->_id || $row['authorizedBy'] == $this->auth->name)){
//            $as = 'authorizedBy';
//            $sign = true;
//            $showpad = true;
//        }

        $row['decideAs'] = $as;
        $row['decideAsTitle'] = \Illuminate\Support\Str::headline($as);
        $row['needSigning'] = $sign;
        $row['needReview'] = $initial;
        $row['showSignPad'] = $showpad;
        $row['approverName'] = $approverName;
        $row['changeDate'] = $changeDate;

        return parent::rowPostProcess($row);
    }

    public function postGetSeq(Request $request)
    {
        $entity = $request->get('entity');

        $company = $request->get('company');

        if( $request->has('padding') ){
            $padding = $request->get('padding')??env('NUM_PAD', 1);
        }else{
            $padding = env('NUM_PAD', 1);
        }

        if( is_null($entity) && $entity != ''){
            $seq = false;
        }else{
            $rec = $this->model->where('PurchaseReqPrefix', '=', $entity)->max('purchaseSequence');
            $seq = $rec + 1;
        }

        //$seq = CedarUtil::getSequence($entity);

        if($seq){
            return response()->json([
                'result'=>'OK',
                'entity'=>$entity,
                'seq'=>$seq,
                'padded'=> str_pad($seq, $padding , '0', STR_PAD_LEFT )
            ]);

        }else{
            return response()->json([
                'result'=>'ERR',
                'msg'=>'NOENTITY'
            ]);
        }


    }


}
