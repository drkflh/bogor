<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Workflow\Admin;

use App\Helpers\AuthUtil;
use App\Helpers\NumberUtil;
use App\Helpers\Util;
use App\Http\Controllers\Core\AdminController;
use App\Http\Controllers\Core\UserController;
use App\Models\Dms\Doc;
use App\Models\Core\Mongo\User;
use Carbon\Carbon;
use DateInterval;
use DatePeriod;
use DateTime;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class DashboardController extends AdminController
{
    public function __construct()
    {
        parent::__construct();

        $this->model = new Doc();
    }

    public function getIndex()
    {
        $this->title = 'Dashboard Workflow';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);

        $this->nav_section = 'users';
        $this->yml_file = 'fields';
        $this->res_path = 'views/workflow/admin/dashboard';

        return parent::getIndex();
    }

    public function getDashboard($id = null){

        $this->yml_file = 'fields';
        $this->res_path = 'views/workflow/admin/dashboard';
        $this->yml_layout_file = 'tracking_layout';
        $this->logo = env('APP_LOGO');

        $this->title = 'Dashboard Workflow';

        $this->show_title = false;

        $this->item_data_url = 'workflow/dashboard/data';

        $this->item_id = 1;

        $this->has_tab = false;

        $this->form_mode = 'edit';

        $this->form_view = 'form.htmlpage';

        $this->form_type = 'html';

        $this->form_layout = 'workflow.admin.dashboard.dashboard';

        $this->can_autosave = false;

        $this->can_lock = true;

        $this->can_add = false;

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        $this->aux_data = $formOptions;

        return parent::formGenerator();
    }


    public function postIndex(Request $request)
    {
        $this->defOrderField = 'createdDate';
        $this->defOrderDir = 'desc';

        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        return $model;
    }

    public function beforeSave($data)
    {
        $data['roleId'] = AuthUtil::getRoleId('Employee');
        return parent::beforeSave($data); // TODO: Change the autogenerated stub
    }

    public function getData($id, $additional_data = null)
    {
        $date = Carbon::now()->year;
        // $date = JobRegister::select('inquiryDate')->first();
        // $year = Carbon::parse($date->inquiryDate)->year;
        // dd($date);date("d M Y", strtotime('inquiryDate'))
        $listcompany = Company::select('companyName')->orderBy('companyCode', 'ASC')->get();
        $company = $listcompany->each->makeHidden(['_id']);

        debug($listcompany->toArray());

        // data on table
        $salesHighlight = SalesHighlight::select('company', 'projectName', 'status', 'remarks', 'followUp', 'lastFollowUp')->orderBy('lastFollowUp', 'DESC')->get();
        $hightlight = $salesHighlight->each->makeHidden(['_id']);
        $salesLead = JobRegister::select('jobNo', 'company', 'project', 'scope', 'salesPerson', 'actualDelivery')->where('status', '=', 'Budgetary')->where('jobStatus', '!=', 'Closed')->orderBy('inquiryDate', 'DESC')->get();
        $lead = $salesLead->each->makeHidden(['_id']);
        $salesProspect = JobRegister::select('jobNo','company', 'project', 'scope', 'salesPerson', 'actualDelivery')->where('status', '=', 'Firm Buying')->where('jobStatus', '!=', 'Closed')->orderBy('inquiryDate', 'DESC')->get();
        $prospect = $salesProspect->each->makeHidden(['_id']);

        // data on card
        $firmcoy1 = JobRegister::where('participatingCompany', '=', '01')->where('status', '=', 'Firm Buying')->count();
        $budgetaryCoy1 = JobRegister::where('participatingCompany', '=', '01')->where('status', '=', 'Budgetary')->count();
        $newOrderCoy1 = JobRegister::where('participatingCompany', '=', '01')->where('AwardedPONo', '!=', null)->count();

        $firmcoy2 = JobRegister::where('participatingCompany', '=', '02')->where('status', '=', 'Firm Buying')->count();
        $budgetaryCoy2 = JobRegister::where('participatingCompany', '=', '02')->where('status', '=', 'Budgetary')->count();
        $newOrderCoy2 = JobRegister::where('participatingCompany', '=', '02')->where('AwardedPONo', '!=', null)->count();

        $firmcoy3 = JobRegister::where('participatingCompany', '=', '03')->where('status', '=', 'Firm Buying')->count();
        $budgetaryCoy3 = JobRegister::where('participatingCompany', '=', '03')->where('status', '=', 'Budgetary')->count();
        $newOrderCoy3 = JobRegister::where('participatingCompany', '=', '03')->where('AwardedPONo', '!=', null)->count();

        $firmcoy4 = JobRegister::where('status', '=', 'Firm Buying')->count();
        $budgetaryCoy4 = JobRegister::where('status', '=', 'Budgetary')->count();
        $newOrderCoy4 = JobRegister::where('AwardedPONo', '!=', null)->count();

        $firmGoodwin = JobRegister::where('Brand', '=', 'Goodwin')->where('status', '=', 'Firm Buying')->count();
        $budgetaryGoodwin = JobRegister::where('Brand', '=', 'Goodwin')->where('status', '=', 'Budgetary')->count();
        $newOrderGoodwin = JobRegister::where('Brand', '=', 'Goodwin')->where('AwardedPONo', '!=', null)->count();
        // dd($firmGoodwin);
        $firmSri = JobRegister::where('Brand', '=', 'SRI')->where('status', '=', 'Firm Buying')->count();
        $budgetarySri = JobRegister::where('Brand', '=', 'SRI')->where('status', '=', 'Budgetary')->count();
        $newOrderSri = JobRegister::where('Brand', '=', 'SRI')->where('AwardedPONo', '!=', null)->count();
        // dd($budgetarySri);
        $firmBurraco = JobRegister::where('Brand', '=', 'Burraco')->where('status', '=', 'Firm Buying')->count();
        $budgetaryBurraco = JobRegister::where('Brand', '=', 'Burraco')->where('status', '=', 'Budgetary')->count();
        $newOrderBurraco = JobRegister::where('Brand', '=', 'Burraco')->where('AwardedPONo', '!=', null)->count();
        // dd($firmBurraco);
        $firmOther = JobRegister::where('Brand', '!=', 'Goodwin', 'Brand', '!=', 'SRI', 'Brand', '!=', 'Burraco')->where('status', '=', 'Firm Buying')->count();
        $budgetaryOther = JobRegister::where('Brand', '!=', 'Goodwin', 'Brand', '!=', 'SRI', 'brand', '!=', 'Burraco')->where('status', '=', 'Budgetary')->count();
        $newOrderOther = JobRegister::where('Brand', '!=', 'Goodwin', 'Brand', '!=', 'SRI', 'Brand', '!=', 'Burraco')->where('AwardedPONo', '!=', null)->count();
        // dd($newOrderOther);

        $population['cardCoy1'] = [
            'companyName'=>$company[0] ?? '',
            'firmBuying'=>$firmcoy1,
            'budgetary'=>$budgetaryCoy1,
            'newOrder'=>$newOrderCoy1,
            'image'=>url('images/icons/pie-graph.png'),
            'titleColor'=>'text-budget',
            'companyType'=>'company'
        ];
        $population['cardCoy2'] = [
            'companyName'=>$company[1] ?? '',
            'firmBuying'=>$firmcoy2,
            'budgetary'=>$budgetaryCoy2,
            'newOrder'=>$newOrderCoy2,
            'image'=>url('images/icons/pie-graph.png'),
            'titleColor'=>'text-budget',
            'companyType'=>'company'
        ];
        $population['cardCoy3'] = [
            'companyName'=>$company[2] ?? '',
            'firmBuying'=>$firmcoy3,
            'budgetary'=>$budgetaryCoy3,
            'newOrder'=>$newOrderCoy3,
            'image'=>url('images/icons/pie-graph.png'),
            'titleColor'=>'text-budget',
            'companyType'=>'company'
        ];
        $population['cardCoy4'] = [
            'companyName'=>'Company Wide',
            'firmBuying'=>$firmcoy4,
            'budgetary'=>$budgetaryCoy4,
            'newOrder'=>$newOrderCoy4,
            'image'=>url('images/icons/pie-graph.png'),
            'titleColor'=>'text-budget',
        ];
        $population['cardGoodwin'] = [
            'companyName'=>'Goodwin',
            'firmBuying'=>$firmGoodwin,
            'budgetary'=>$budgetaryGoodwin,
            'newOrder'=>$newOrderGoodwin,
            'image'=>url('images/icons/pie-graph.png'),
            'titleColor'=>'card-title-maroon'
        ];
        $population['cardSri'] = [
            'companyName'=>'SRI',
            'firmBuying'=>$firmSri,
            'budgetary'=>$budgetarySri,
            'newOrder'=>$newOrderSri,
            'image'=>url('images/icons/pie-graph.png'),
            'titleColor'=>'card-title-maroon'
        ];
        $population['cardBurraco'] = [
            'companyName'=>'Burraco',
            'firmBuying'=>$firmBurraco,
            'budgetary'=>$budgetaryBurraco,
            'newOrder'=>$newOrderBurraco,
            'image'=>url('images/icons/pie-graph.png'),
            'titleColor'=>'card-title-maroon'
        ];
        $population['cardOther'] = [
            'companyName'=>'Other',
            'firmBuying'=>$firmOther,
            'budgetary'=>$budgetaryOther,
            'newOrder'=>$newOrderOther,
            'image'=>url('images/icons/pie-graph.png'),
            'titleColor'=>'card-title-maroon'
        ];
        $population['tableHighlight'] = [
            'titleTable'=>'Sales Highlight',
            'titleColor'=>'text-blue',
            'thTable'=>['#', 'Company', 'Project Name', 'Status', 'Remarks', 'Follow Up', 'Last Follow Up'],
            'thClass'=>['text-25', 'text-125', 'text-125', 'text-100', 'text-175', 'text-75', 'text-100'],
            'image'=>url('images/icons/lamp.png'),
            'tdTable'=>$hightlight,
            'styleImage'=>'width:65px;height:65px;margin-right:8px;margin-top: -15px;'
        ];
        $population['tableLead'] = [
            'titleTable'=>'Sales Lead',
            'titleColor'=>'text-red',
            'thTable'=>['#', 'Job No.', 'Project Name', 'Scope', 'Buying Company', 'Last Follow Up', 'Follow Up'],
            'thClass'=>['text-25', 'text-75', 'text-150', 'text-125', 'text-175', 'text-100', 'text-75'],
            'image'=>url('images/icons/compass.png'),
            'tdTable'=>$lead,
            'styleImage'=>'width:40px;height:40px;margin-right:8px;margin-top:5px;'
        ];
        $population['tableProspect'] = [
            'titleTable'=>'Sales Prospect',
            'titleColor'=>'text-green',
            'thTable'=>['#', 'Job No.', 'Project Name', 'Scope', 'Buying Company', 'Last Follow Up', 'Follow Up'],
            'thClass'=>['text-25', 'text-75', 'text-150', 'text-125', 'text-175', 'text-100', 'text-75'],
            'image'=>url('images/icons/target.png'),
            'tdTable'=>$prospect,
            'styleImage'=>'width:40px;height:40px;margin-right:8px;margin-top:5px;'
        ];

        if(Auth::check()){
            return response()->json($population, 200);
        }else{
            return response('Unauthorized', 401);
        }

    }

    public function getSales(){
        $begin = new DateTime( '2020-08-01' );
        $end = new DateTime( '2020-08-30' );
        $interval = new DateInterval('P1D');
        $dr = new DatePeriod($begin, $interval ,$end);

        $data = [];

        $s1 = [];
        foreach ($dr as $d){
            $s1[ $d->format('d-m-Y') ] = rand( 1, 45);
        }

        $s2 = [];
        foreach ($dr as $d){
            $s2[ $d->format('d-m-Y') ] = rand( 1, 25);
        }

        $s3 = [];
        foreach ($dr as $d){
            $s3[ $d->format('d-m-Y') ] = rand( 1, 35);
        }

        $data = [
            [ 'name'=>'Series 1', 'data'=> $s1 ]
        ];

        return response()->json( $data );

    }

}
