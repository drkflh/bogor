<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */

namespace App\Http\Controllers\Sms\ProcurementLogistic;

use App\Helpers\App\DmsUtil;
use App\Helpers\Injector;
use App\Helpers\App\SmsUtil;
use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Helpers\RefUtil;
use App\Http\Controllers\Core\AdminController;
use App\Models\Core\Mongo\User;
use App\Models\Sms\ProcurementLogistic\PurchaseOrder;
use App\Models\Sms\ProcurementLogistic\PurchaseRequisition;
use App\Models\Reference\Company;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

class PurchaseOrderController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/sms/procurementlogistic';
        $this->yml_file = 'purchaseorder_controller';

        $this->entity = 'Purchase Order';
        $this->auth_entity = 'purchase-order';

        $this->controller_base = 'sms/procurement-logistics/purchase-order';

        $this->view_base = 'sms.procurementlogistic.purchaseorder';

        $this->with_workflow = true;

        $this->model = new PurchaseOrder();
    }

    public function getIndex()
    {
        $this->title = '<img class="d-none d-md-inline-block"  style="width:38px;height:auto;margin-top:-10px;margin-right:3px" src="'.url('images/icons/purchasereq.png').'" /> Purchase Order Register';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;

        $this->viewer_layout = 'sms.procurementlogistic.purchaseorder.view_layout';

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'sms.procurementlogistic.purchaseorder.formlayout';
        $this->form_dialog_size = 'xl';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->can_clone = false;
        $this->can_multi_clone = false;

        $this->print_template = 'purchase-order-template';
        $this->print_modal_size = 'xl';

        $this->viewer_as_document = true;

        $this->add_as_page = true;
        $this->edit_as_page = true;

        $this->title_fields = 'jobNo';
        $this->pdf_title_fields = 'jobNo';

        return parent::getIndex();
    }

    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add').' '.$this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'sms.procurementlogistic.purchaseorder.formlayout';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $item = $this->model->find($id);

        $this->item_id = $id;

        $this->title = __('Edit').' '.$item->jobNo;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'sms.procurementlogistic.purchaseorder.formlayout';

        $this->runAcl();
        $this->runUrlSet('edit');
        $this->runPageViewSet('edit');

        $this->page_redirect_after_save = true;

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getView(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        return parent::getView($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        $formOptions['vendorObjectOptions'] = SmsUtil::toOptions( SmsUtil::getVendors(), 'vendorCode', '_object', true );
        $formOptions['companyObjectOptions'] = SmsUtil::toOptions( SmsUtil::getPrCompanies(), 'companyName', '_object', true );
        $formOptions['requestNoObjectOptions'] = SmsUtil::toOptions( SmsUtil::getRequestNo(), 'requestNo', '_object', true );
        $formOptions['prNoOptions'] = SmsUtil::toOptions(SmsUtil::getRequestNo(),'requestNo','requestNo', false);
        $formOptions['costCenterOptions'] = SmsUtil::toOptions(SmsUtil::getCostCenter(),'costCenterCode','costCenterCode', false);
        $formOptions['jobNoOptions'] = SmsUtil::toOptions(SmsUtil::getJobNumber(), 'jobNo', 'jobNo', false);
        // $formOptions['requestNoOptions'] = SmsUtil::toOptions(SmsUtil::getPrRequestNo(), 'requestNo', 'requestNo', false);
        // $formOptions['costCenterOptions'] = SmsUtil::toOptions(SmsUtil::getPrCostCenter(), 'costCenter', 'costCenter', false);
        $formOptions['currencyOptions'] = RefUtil::toOptions(RefUtil::getCurrency(),'name','name', false);

        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }

    public function setupInjector($uiOptions, $data = null)
    {
        $uiOptions = Injector::setObject('details') // name variable / field yang akan diinject
            ->setObjFields( // mwnambahkan setting field untuk table
                [
                    [ 'label'=>'Product', 'key'=>'ProductID', 'class'=>'text-100' , 'type'=>'String' ],
                    [ 'label'=>'Descriptions', 'key'=>'Descriptions', 'class'=>'text-200', 'type'=>'String' ],
                    [ 'label'=>'Notes', 'key'=>'Notes', 'class'=>'text-200', 'type'=>'String' ],
                    [ 'label'=>'Delivery', 'key'=>'Delivery', 'class'=>'text-100', 'type'=>'number','format'=>'integer'],
                    [ 'label'=>'Period', 'key'=>'Period', 'class'=>'text-100', 'type'=>'String' ],
                    [ 'label'=>'Qty', 'key'=>'QTY', 'class'=>'text-100 text-center', 'type'=>'Number', 'format'=>'integer' ],
                    [ 'label'=>'uom', 'key'=>'uom', 'class'=>'text-100', 'type'=>'String' ],
                    [ 'label'=>'Unit Price', 'key'=>'UnitPrice', 'class'=>'text-100 text-right', 'type'=>'Number', 'format'=>'currency' ],
                    [ 'label'=>'Amount Ordered', 'key'=>'AmountOrdered', 'class'=>'text-100 text-right', 'type'=>'Number', 'format'=>'currency' ]
                ]
            )->setObjDef( // set object default
                [
                    'ProductID'=>'',
                    'Descriptions'=>'',
                    'Notes'=>'',
                    'Delivery'=>'',
                    'Period'=>'',
                    'QTY'=> 0,
                    'uom'=> '',
                    'UnitPrice'=> 0,
                    'AmountOrdered'=> 0
                ]
            )->setObjParams(
                [
                    'uom' => $formOptions['uomOptions'] = RefUtil::toOptions(RefUtil::getUom(),'uom','uom', false),
                ]
            )
            ->setObjTemplate(file_get_contents( resource_path('views/sms/procurementlogistic/purchaseorder/doc.html') )) // set template
            ->injectObject($uiOptions); // inject

        //start $addDocument
        $uiOptions = Injector::setObject('addDocument') // name variable / field yang akan diinject
            ->setObjFields( // mwnambahkan setting field untuk table
                [
                    [ 'label'=>'Name', 'key'=>'Name', 'class'=>'text-100' , 'type'=>'String' ],
                ]
            )->setObjDef( // set object default
                [
                    'Name'=>'',
                ]
            )->setObjParams(
                [
                    'Name' => $formOptions['NameOptions'] = RefUtil::toOptions(RefUtil::getDocName(),'name','name', false),
                ]
            )
            ->setObjTemplate(file_get_contents( resource_path('views/sms/procurementlogistic/purchaseorder/addDoc.html') )) // set template
            ->injectObject($uiOptions); // inject

        //start $picContacts
        // use injector to provide parameter for simpletablemodaltemplate / simpletable
        $uiOptions = Injector::setObject('invitationToBid') // name variable / field yang akan diinject
            ->setObjFields( // mwnambahkan setting field untuk table
                [
                    ['label' => 'Doc. Date', 'key' => 'DocDate', 'class' => 'text-100'],
                    ['label' => 'Doc. Ref', 'key' => 'DocRef', 'class' => 'text-100'],
                    ['label' => 'Subject', 'key' => 'Subject', 'class' => 'text-100'],
                    ['label' => 'Call Code', 'key' => 'FCallCode', 'class' => 'text-100']
                ]
            )->setObjDef( // set object default
                [
                    'DocDate' => '',
                    'DocRef' => '',
                    'Subject' => '',
                    'FCallCode' => '',
                ]
            )
            ->setObjParams(
                [
                    'baseUrl' => url('/'),
                    'uploadUrl' => url('api/v1/core/upload')
                ]
            )
            ->setObjTemplate(file_get_contents(resource_path('views/sms/procurementlogistic/purchaserequisition/item.html'))) // set template
            ->injectObject($uiOptions); // inject into uiOption array

        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }


    public function postClone(Request $request)
    {
        $this->revision_key = 'orderNo';
        return parent::postClone($request);
    }

    public function postIndex(Request $request)
    {
//        $this->defOrderField = 'Item';
//        $this->defOrderDir = 'asc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        return $model;
    }

    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        if(is_array( $data['prNo'] ) && isset($data['prNo']['value'])){
            $data['prNo'] = $data['prNo']['value'];
        }
        return parent::beforeSave($data);
    }

    public function afterUpdate($id, $data = null)
    {
//        $pr = PurchaseRequisition::where('requestNo', '=', $data['prNo'])->first();
//
//        if($pr){
//            $pr->poNo = $data['orderNo'];
//            $pr->save();
//        }

        return parent::afterUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function afterSave($data)
    {

        $pr = PurchaseRequisition::where('requestNo', '=', $data['prNo'])->first();

        if($pr){
            $pr->poNo = $data['orderNo'];
            $pr->save();
        }
        return parent::afterSave($data); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {
        if(request()->has('pr')){
            $prNo = request()->get('pr');

            $pr = PurchaseRequisition::where('requestNo', '=', trim($prNo))
                    ->first();

            if($pr){
                $pr = $pr->toArray();
                unset($pr['id']);
                unset($pr['_id']);
                $this->def_param = $pr;

                $poNumber = str_replace('PR-', 'PO-', $this->def_param['requestNoPrefix'].'-'.$this->def_param['rev']);
                $this->def_param['purchaseOrderDate'] = $this->def_param['requestDate'];
                $this->def_param['orderNo'] = $poNumber;
                $this->def_param['approvalStatus'] = '';

            }
        }

        if(request()->has('companyName')){
            $companyName = request()->get('companyName');
            $noNpwp = Company::where('companyName', '=', trim($companyName))->pluck('noNpwp')->first();

            if($noNpwp){
                $this->def_param['noNpwp'] = $noNpwp;
            }
        }

        //$this->def_param['rev'] = 0;
        $this->def_param['UnitPrice'] = 'IDR';
        $this->def_param['authorizedBy'] = '';

        return parent::getParam(); // TODO: Change the autogenerated stub
    }


    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }

    public function beforeImportCommit($data)
    {

        return parent::beforeImportCommit($data); // TODO: Change the autogenerated stub
    }

    /** function untuk post get sequence purchase rquisition number */

    public function postGetSeq(Request $request)
    {
        $entity = $request->get('entity');
        $company = $request->get('company');

        if( $request->has('padding') ){
            $padding = $request->get('padding')??env('NUM_PAD', 1);
        }else{
            $padding = env('NUM_PAD', 1);
        }

        if( is_null($entity) && $entity != ''){
            $seq = false;
        }else{
            $rec = $this->model->where('PurchaseReqPrefix', '=', $entity)->max('purchaseSequence');
            $seq = $rec + 1;
        }

        //$seq = CedarUtil::getSequence($entity);

        if($seq){
            return response()->json([
                'result'=>'OK',
                'entity'=>$entity,
                'seq'=>$seq,
                'padded'=> str_pad($seq, $padding , '0', STR_PAD_LEFT )
            ]);

        }else{
            return response()->json([
                'result'=>'ERR',
                'msg'=>'NOENTITY'
            ]);
        }


    }

}
