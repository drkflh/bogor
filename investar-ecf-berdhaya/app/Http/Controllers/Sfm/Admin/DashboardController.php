<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Sfm\Admin;

use App\Helpers\AuthUtil;
use App\Helpers\NumberUtil;
use App\Helpers\Util;
use App\Http\Controllers\Core\AdminController;
use App\Http\Controllers\Core\UserController;
use App\Models\Reference\Company;
use App\Models\Dms\Doc;
use App\Models\Core\Mongo\User;
use App\Models\Reference\Product;
use App\Models\Sfm\SalesOperation\JobRegister;
use App\Models\Sfm\SalesOperation\SalesHighlight;
use App\Models\Sfm\Invoice;
use App\Models\Sfm\SalesOrder;
use Carbon\Carbon;
use DateInterval;
use DatePeriod;
use DateTime;
use Dflydev\DotAccessData\Data;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use App\Models\Sfm\ShoppingCart;
use App\Models\Sfm\Purchase;

class DashboardController extends AdminController
{
    public function __construct()
    {
        parent::__construct();

        $this->auth_entity = 'sfm-dashboard';

        $this->model = new Doc();
    }

    public function getIndex()
    {
        $this->title = 'Sales Dashboard';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);

        $this->nav_section = 'users';
        $this->yml_file = 'fields';
        $this->res_path = 'views/sfm/admin/dashboard';

        $this->template_var = [ 'hasSideNav'=>false ];

        $this->can_add = true;

        $this->data_url = 'admin/fieldreport';

        $this->table_view = env('ADMIN_DASHBOARD_VIEW', 'trips.dashboard');

        return parent::getIndex();
    }

    public function getDashboard($id = null){

        $this->res_path = 'models/controllers/sfm/admin';
        $this->yml_file = 'dashboard_controller';

        $this->nav_file = 'nav';

        $this->title = 'Dashboard';

        $this->show_title = false;

        $this->item_data_url = 'sfm/dashboard/data';

        $this->item_id = 1;

        $this->has_tab = false;

        $this->form_mode = 'edit';

        $this->form_view = 'form.htmlpage';

        $this->form_type = 'html';

        $this->form_layout = 'sfm.admin.dashboard.dashboard';

        $this->can_autosave = false;

        $this->can_lock = true;

        $this->can_add = false;

        $this->page_refresh_button = true;

        $this->page_additional_view = 'sfm.admin.dashboard.toolbar';

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        $formOptions['companyName'] = "''";

        $defaultRange = [
                Carbon::now()->startOfYear()->toDateString(),
                Carbon::now()->endOfYear()->toDateString(),
            ];

        $this->extra_query = [
            'fromDate'=>$defaultRange,
            'untilDate'=>'',
        ];

        $this->aux_data = $formOptions;

        return parent::formGenerator();
    }


    public function postIndex(Request $request)
    {
        $this->defOrderField = 'createdDate';
        $this->defOrderDir = 'desc';

        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        return $model;
    }

    public function beforeSave($data)
    {
        $data['roleId'] = AuthUtil::getRoleId('Employee');
        return parent::beforeSave($data); // TODO: Change the autogenerated stub
    }

    public function getData($id, $additional_data = null)
    {
        Util::ajaxDebug();
        $request = Request::capture();

        $dateRange = $request->get('extraData')['fromDate'];

        $date = Carbon::now()->year;
        $yy = Carbon::now()->isoFormat('YY');
        $year = Carbon::now()->format('Y');
        $month = Carbon::now()->format('m');
        // $date = JobRegister::select('inquiryDate')->first();
        // $year = Carbon::parse($date->inquiryDate)->year;
        // dd($date);date("d M Y", strtotime('inquiryDate'))

        // Carbon::parse(ShoppingCart::get('orderTime'))->format('Y-m-d');

        $population = [];

        $search = $year . '-' . $month;

        // $population['totalRevenue'] = numberUtil::currency(ShoppingCart::where('orderTime', 'like', $search . '%')
        // ->sum('price'));

        // $population['totalSales'] = ShoppingCart::where('orderTime', 'like', $search . '%')
        // ->count('_id');

        $population['totalRevenue'] =numberUtil::currency(Invoice::where('status', '=', 'Paid')
        ->sum('total'));
        $population['totalSales'] = numberUtil::currency(SalesOrder::sum('orderSubTotal'));
        $population['totalBuyer'] = Invoice::select('buyer')->groupBy('buyer')->count('buyer');

        // data untuk chart, berupa array dalam array, bukan array of object
        // https://github.com/ankane/vue-chartkick/blob/v0.6.1/README.md
        $population['salesByPeriod'] =  [
            ['Jan', [123, 400]],
            ['Feb', 200],
            ['Mar', 400],
            ['Apr', 800],
            ['May', 700],
            ['Jun', 1400],
            ['Jul', 1020],
        ];
        $population['revenueByPeriod'] = [
            ['Jan', 3000000],
            ['Feb', 5750000],
            ['Mar', 4600000],
            ['Apr', 2350000],
            ['May', [9970000, 2350000, 1300000 ]],
            ['Jun', 12004000],
            ['Jul', 28000000],
        ];

        $totalBronzeUser = User::select('_id')->where('roleSlug', '=', 'bronze')->count();
        $totalSilverUser = User::select('_id')->where('roleSlug', '=', 'silver')->count();
        $totalGoldUser = User::select('_id')->where('roleSlug', '=', 'gold')->count();
        $totalPlatinumUser = User::select('_id')->where('roleSlug', '=', 'platinum')->count();

        $population['totalUser'] = [
            ['Bronze', $totalBronzeUser],
            ['Silver', $totalSilverUser],
            ['Gold', $totalGoldUser],
            ['Platinum', $totalPlatinumUser]
        ];

        // if(AuthUtil::is('Owner')){
        //     $population['totalUser'] = User::count();
        //     $population['totalBusiness'] = BizProfile::where('ownerId', '=', Auth::user()->_id )->count();
        //     $population['totalProduct'] = HalalProduct::where('ownerId', '=', Auth::user()->_id )->count();
        // }

        // if(AuthUtil::is('Validator')){
        //     $population['totalUser'] = User::count();
        //     $population['totalBusiness'] = BizProfile::where('ownerId', '=', Auth::user()->_id )->count();
        //     $population['totalProduct'] = HalalProduct::where('ownerId', '=', Auth::user()->_id )->count();
        // }


        if(Auth::check()){
            return response()->json($population, 200);
        }else{
            return response('Unauthorized', 401);
        }

    }

    public function getSales(){
        $begin = new DateTime( '2020-08-01' );
        $end = new DateTime( '2020-08-30' );
        $interval = new DateInterval('P1D');
        $dr = new DatePeriod($begin, $interval ,$end);

        $data = [];

        $s1 = [];
        foreach ($dr as $d){
            $s1[ $d->format('d-m-Y') ] = rand( 1, 45);
        }

        $s2 = [];
        foreach ($dr as $d){
            $s2[ $d->format('d-m-Y') ] = rand( 1, 25);
        }

        $s3 = [];
        foreach ($dr as $d){
            $s3[ $d->format('d-m-Y') ] = rand( 1, 35);
        }

        $data = [
            [ 'name'=>'Series 1', 'data'=> $s1 ]
        ];

        return response()->json( $data );

    }

    private function setWithinYear($model, $year, $field )
    {
        $model = $model->where(function($q) use($year, $field) {
            if(is_array($year) && count($year) == 2){
                $start = Carbon::make( $year[0] );
                $end = Carbon::make( $year[1] );

                $q->orWhereBetween( $field, [$start, $end]);
            }else{
                $start = Carbon::make( $year.'-01-01' )->startOfYear();
                $end = Carbon::make( $year.'-01-01' )->endOfYear();

                $q->where($field,'like','%'.$year.'%')
                    ->orWhereBetween( $field, [$start, $end]);
            }
        });
        return $model;
    }

}
