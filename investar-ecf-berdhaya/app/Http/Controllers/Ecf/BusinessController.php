<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Ecf;

use App\Helpers\App\DwfUtil;
use App\Helpers\App\FmsUtil;
use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Injector;
use App\Helpers\RefUtil;
use App\Helpers\Util;
use App\Http\Controllers\Core\AdminController;
use App\Models\Ecf\Business;
use App\Models\Ecf\Farm;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\View;
use Illuminate\Support\Str;

class BusinessController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/ecf';

        $this->yml_file = 'business_controller';

        $this->entity = 'Business';

        $this->auth_entity = 'ecf-business-register';

        $this->controller_base = 'ecf/business-register';

        $this->view_base = 'ecf.business';

        $this->model = new Business();
    }

    public function getIndex()
    {
        $this->title = 'Badan Usaha';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
        * Set form layout
        */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.business.form_layout';
        $this->form_dialog_size = 'md';

        /**
        * Set Viewer layout
        */
        $this->viewer_layout = 'ecf.business.view_layout';
        $this->viewer_dialog_size = 'md';

        $this->with_advanced_search = false;

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->can_print = false;
        $this->can_delete = false;

        $this->print_template = 'business-profile';

        $this->add_as_page = false;
        $this->edit_as_page = false;

        $this->title_fields = 'businessId';
        $this->pdf_title_fields = 'businessId';

        return parent::getIndex();
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        $formOptions['kabupatenObjectOptions'] = RefUtil::toGroupOptions( RefUtil::getKabupaten() , 'kabupatenName', '_object', 'provinceName', true );
        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }


    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add').' '.$this->entity;

        $this->has_tab = false;

        $this->show_title = false;

        $this->runUrlSet();
        $this->runPageViewSet();
        $this->runAcl();

        $this->localStorageKey = 'SC_'.date('Ymd', time()).'_'.Auth::user()->cliCode;

        $this->item_id = null;

        $this->keyword0 = $keyword0;
        $this->keyword1 = $keyword1;
        $this->keyword2 = $keyword2;

        $this->form_layout = 'ecf.business.form_layout';

        $this->page_methods_view = 'ecf.business.add_methods';
        $this->page_computed_view = 'ecf.business.add_computed';
        $this->page_watch_view = 'ecf.business.add_watch';

        $this->page_redirect_after_save = true;

        $this->show_print_button = true;

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        $formOptions['kabupatenObjectOptions'] = RefUtil::toGroupOptions( RefUtil::getKabupaten() , 'kabupatenName', '_object', 'provinceName', true );

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }


    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {

        $obj = $this->model->find($id);

        $this->title = __('Edit').' '.$obj->businessName;

        $this->has_tab = false;

        $this->show_title = false;

        $this->runUrlSet();
        $this->runPageViewSet();
        $this->runAcl();

        $this->localStorageKey = 'SC_'.date('Ymd', time()).'_'.Auth::user()->cliCode;

        $this->item_id = $id;

        $this->keyword0 = $keyword0;
        $this->keyword1 = $keyword1;
        $this->keyword2 = $keyword2;

        $this->form_layout = 'ecf.business.form_layout';

        $this->page_methods_view = 'ecf.business.edit_methods';
        $this->page_computed_view = 'ecf.business.edit_computed';
        $this->page_watch_view = 'ecf.business.edit_watch';

        $this->page_redirect_after_save = true;

        $this->show_print_button = true;

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function setupInjector($uiOptions, $data = null)
    {
        $geoFenceTemplate = "'".view('ecf.business.geofence')->render()."'" ;

        $uiOptions = Injector::setObject('geoFence') // name variable / field yang akan diinject
        ->setObjFields( // mwnambahkan setting field untuk table
            [
                ['label' => 'Latitude', 'key' => 'center.lat', 'class' => 'text-left ellipsis'],
                ['label' => 'Longitude', 'key' => 'center.lng', 'class' => 'text-left ellipsis'],
            ]
        )->setObjDef( // set object default
            [
                '_id'=>'',
                'name'=>'',
                'center'=>[
                    'lat'=>0.0,
                    'lng'=>0.0,
                ]
            ]
        )
            ->setObjParams(
                [
                    'baseUrl' => url('/'),
                    'uploadUrl' => url('api/v1/core/upload')
                ]
            )
            ->setObjTemplate( $geoFenceTemplate ) // set template
            ->injectObject($uiOptions); // inject into uiOption array

        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        if(AuthUtil::is('owner')){
            $model = $model->where('masterId','=', Auth::user()->_id );
        }
        if( AuthUtil::is('field-officer') || AuthUtil::is('business-admin')){
            if( isset(Auth::user()->bizUnitId) ){
                $model = $model->where('businessId','=', Auth::user()->bizUnitId );
            }else if(isset(Auth::user()->masterId) ){
                $model = $model->where('masterId','=', Auth::user()->masterId );
            }else{
                $model = $model->where('masterId','=', Auth::user()->_id );
            }
        }
        return parent::additionalQuery($model, $request); // TODO: Change the autogenerated stub
    }


    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {
        if( is_null($data['businessId']) || $data['businessId'] == ''  ){
            if( $data['provinceCode'] != '' && $data['kabupatenCode'] != ''){
                $data = $this->getFarmNumber($data);
            }
        }
        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function beforeSave($data)
    {
        if( $data['provinceCode'] != '' && $data['kabupatenCode'] != ''){
            $data = $this->getFarmNumber($data);
        }
        return parent::beforeSave($data); // TODO: Change the autogenerated stub
    }

    public function getFarmNumber($data)
    {
        $prov = $data['provinceCode'];
        $kab = $data['kabupatenCode'];

        $max = Farm::where('provinceCode', '=', $prov )
            ->where('kabupatenCode', '=', $kab )
            ->max('seq');
        $max++;

        $max = str_pad( $max , 4, "0", STR_PAD_LEFT);

        $data['seq'] = $max;

        $data['businessId'] = $prov.$kab.$max;

        return $data;
    }

    public function getParam()
    {

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    public function postIndex(Request $request)
    {

        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }

}
