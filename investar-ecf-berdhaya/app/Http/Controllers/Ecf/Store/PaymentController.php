<?php

/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */

namespace App\Http\Controllers\Ecf\Store;

use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Helpers\Injector;
use App\Http\Controllers\Core\AdminController;
use App\Http\Controllers\Core\PublicController;
use App\Models\Ecf\ShoppingCart;
use App\Models\Ecf\Store\ShoppingCartAttribute;
use App\Models\Core\Mongo\User;
use App\Models\Ecf\SalesOrder;
use App\Models\Ecf\InventoryItem;
use App\Models\Ecf\Invoice;
use App\Models\Ecf\Campaign;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use App\Helpers\RefUtil;
use App\Helpers\App\EcfUtil;
use Illuminate\Support\Str;

class PaymentController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/ecf/store';

        $this->yml_file = 'payment_controller';

        $this->entity = 'Payment';

        $this->auth_entity = 'payment';

        $this->controller_base = 'payment';

        $this->view_base = 'ecf.store.payment';

        $this->model = new ShoppingCart();
        $this->model1 = new SalesOrder();
        $this->model2 = new ShoppingCartAttribute();
        $this->model3 = new Invoice();
        $this->model4 = new InventoryItem();
        $this->model5 = new Campaign();

        $this->upsert_mode = true;
    }

    public function getIndex()
    {
        $request =new Request();
        $id = Auth::user()->cartSession;

        $this->title = '';

        return $this->getEdit($request, $id);
    }

    public function setupInjector($uiOptions, $data = null)
    {
        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }

    public function setupFormOptions($formOptions, $data = null)
    {

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();
        $formOptions['unitOptions'] = EcfUtil::toOptions(EcfUtil::getUnits(),'uom','uom', true);
        $formOptions['categoryOptions'] = EcfUtil::toOptions(EcfUtil::getCategories(),['category'],'categoryCode', true);
        $formOptions['currencyOptions'] = RefUtil::toOptions(RefUtil::getCurrency(), 'name','name', true);
        $formOptions['orderStatusOptions'] = [
            ['text' => 'OPEN', 'value' => 'OPEN'],
            ['text' => 'CLOSED', 'value' => 'CLOSED'],
        ];
        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }

    public function paymentConfirmation(Request $request){
        if(!\Illuminate\Support\Facades\Auth::check()){
            return redirect( env('AUTH_REDIRECT_TO','login'));
        }

        $cartSession = Auth::user()->cartSession;
        $name = Auth::user()->name;
        $mobile = $request->mobile;
        $email = $request->email;
        $add_info = $request->add_info;
        $delivery_option = $request->delivery_option;
        $weight = ShoppingCart::where('cartSession','=',$cartSession)->sum('weight');

        if($delivery_option == 'topangDelivery' || $delivery_option == 'courier'){
            $unitShippingCost = 2000;
        }else{
            $unitShippingCost = 0;
        }

        $shippingCost = ceil($weight/1000) * $unitShippingCost ;

        $result = $this->model2::where('cartSession','=',$cartSession)->count();

        if($result <= 0){
            $this->model2->created_at = Carbon::now();
            $this->model2->cartSession = $cartSession;
            $this->model2->status = "Payment";
            $this->model2->buyer = $name;
            $this->model2->mobile = $mobile;
            $this->model2->email = $email;
            $this->model2->add_info = $add_info;
            $this->model2->save();
        }else{
            $this->model2->where("cartSession","=", $cartSession)
            ->update(
                ["status" => "Payment"]
            );
        }

        $this->res_path = 'models/controllers/ecf/store';
        $this->yml_file = 'payment_controller';

        $this->nav_file = 'nav';

        $this->title = ' ';

        $this->show_title = false;

        $this->item_data_url = 'ecf/shopping/data';

        $this->item_id = 1;

        $this->has_tab = false;

        $this->form_mode = 'edit';

        $this->form_view = 'form.htmlpage';

        $this->form_type = 'html';

        $this->form_layout = 'ecf.payment.form_layout';

        $this->can_autosave = false;

        $this->can_lock = true;

        $this->can_add = false;

        $this->page_refresh_button = true;

        // $this->page_additional_view = 'ecf.admin.dashboard.toolbar';

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        // $formOptions['companyName'] = "''";

        // // $defaultRange = [
        // //         Carbon::now()->startOfYear()->toDateString(),
        // //         Carbon::now()->endOfYear()->toDateString(),
        // //     ];

        // // $this->extra_query = [
        // //     'fromDate'=>$defaultRange,
        // //     'untilDate'=>'',
        // // ];

        $this->aux_data = $formOptions;

        return parent::formGenerator();
    }
    public function getData($id, $additional_data = null)
    {
        Util::ajaxDebug();
        $request = Request::capture();

        // if($id){
            // $cartSession = $id;
        // }else{
            $cartSession = Auth::user()->cartSession;
            // $cartSession= "M8rqT7XfTbSV7NSf";
        // }
        // $dateRange = $request->get('extraData')['fromDate'];

        // $date = Carbon::now()->year;
        // $yy = Carbon::now()->isoFormat('YY');
        // $year = Carbon::now()->isoFormat('YYYY');
        // $date = JobRegister::select('inquiryDate')->first();
        // $year = Carbon::parse($date->inquiryDate)->year;
        // dd($date);date("d M Y", strtotime('inquiryDate'))

        $population = [];
        $subTotal = ShoppingCart::where('cartSession','=',$cartSession)->sum('orderSubTotal');
        $population['subTotal'] = ShoppingCart::where('cartSession','=',$cartSession)->sum('orderSubTotal');
        $population['currency'] = ShoppingCart::select('currency')->where('cartSession','=',$cartSession)->first();
        // $population['subTotal'] = NumberUtil::decimal($population('subTotal'));
        $population['totalShopping'] = ShoppingCart::where('cartSession','=',$cartSession)->count('_id');
        $population['weight'] = ShoppingCart::where('cartSession','=',$cartSession)->sum('weight');


        $total = $subTotal;
    //     // ShoppingCart::where('cartSession','=',$cartSession)->sum('weight');
        $weight = $population['weight'] ;
        $unitShippingCost = 0;

        $attributes = $this->model2::where('cartSession','=',$cartSession)->first();

    // // print_r($attributes);
    if(isset($attributes['delivery_option'])){
        $population['delivery'] = $attributes["delivery_option"];
        if($attributes["delivery_option"] == 'topangDelivery' || $attributes["delivery_option"] == 'courier'){
            $unitShippingCost = 2000;
        }else{
            $unitShippingCost = 0;
        }

        $population['shippingCost'] = $this->getShippingCost($weight, $unitShippingCost) ;
        $total = $subTotal ;
        $population['total'] =$total ;
        $population['delivery'] = $attributes["delivery_option"];
        $population['mobile'] = $attributes["mobile"];
        $population['buyerName'] = $attributes["fname"]." ".$attributes['lname'];
        $population['city'] = $attributes["city"];
        $population['orderID'] = "TOP-".$cartSession;
        $population['orderDate'] = Carbon::now()->isoFormat('DD MM YYYY');
        $population['address'] = $attributes["billing_address"]." ".$attributes["billing_address2"];
    }

        $br = ShoppingCart::select('orderQty','productName','orderSubTotal' )
        ->where('cartSession','=',$cartSession)
        ->orderBy('createdDate','desc')
        ->get();
        $datatable = $br->each->makeHidden(['_id']);
        // debug($datatable->toArray());

        $population['tableCart'] = [
              'titleTable'=>'Cart',
              'titleColor'=>'text-green',
              'thClass'=>['text-70 text-center', 'text-150 text-center', 'text-150 text-center', 'text-150 text-center', 'text-100 text-center', 'text-150 text-center', 'text-150 text-center'],
              'tdTable'=> $datatable
          ];


        if(Auth::check()){
            return response()->json($population, 200);
        }else{
            return response('Unauthorized', 401);
        }

    }


    public function getData1($id, $additional_data = null)
    {
        Util::ajaxDebug();
        $request = Request::capture();

        $invCode = $id;
        $cartSession = Auth::user()->cartSession;

        // $dateRange = $request->get('extraData')['fromDate'];

        // $date = Carbon::now()->year;
        // $yy = Carbon::now()->isoFormat('YY');
        // $year = Carbon::now()->isoFormat('YYYY');
        // $date = JobRegister::select('inquiryDate')->first();
        // $year = Carbon::parse($date->inquiryDate)->year;
        // dd($date);date("d M Y", strtotime('inquiryDate'))

        $population = [];
        $population['invNumber'] = $invCode;
        $population['total'] = ShoppingCart::select('orderSubTotal')->where('cartSession','=',$cartSession)->sum('orderSubTotal');
        $population['subTotal'] = ShoppingCart::select('price')->where('cartSession','=',$cartSession)->sum('orderSubTotal');
        $population['currency'] = ShoppingCart::select('currency')->where('cartSession','=',$cartSession)->first();
        // $population['subTotal'] = NumberUtil::decimal($population('subTotal'));
        $population['totalShopping'] = ShoppingCart::where('cartSession','=',$cartSession)->count('_id');
        $population['weight'] = ShoppingCart::where('cartSession','=',$cartSession)->sum('weight');

        // ShoppingCart::where('cartSession','=',$cartSession)->sum('weight');
        $weight = $population['weight'] ;
        $unitShippingCost = 0;

        $attributes = $this->model2::where('cartSession','=',$cartSession)->first();

    // print_r($attributes);
    if(isset($attributes['delivery_option'])){
        $population['delivery'] = $attributShoppings["delivery_option"];
        if($attributes["delivery_option"] == 'topangDelivery' || $attributes["delivery_option"] == 'courier'){
            $unitShippingCost = 2000;
        }else{
            $unitShippingCost = 0;
        }
        $population['shippingCost'] = 0;
        // $population['shippingCost'] = $this->getShippingCost($weight, $unitShippingCost) ;
        $population['total'] = $population['shippingCost'] + $population['subTotal'] ;
        $population['delivery'] = $attributes["delivery_option"];
        $population['mobile'] = $attributes["mobile"];
        $population['buyerName'] = $attributes["fname"]." ".$attributes['lname'];
        $population['city'] = $attributes["city"];
        $population['orderID'] = $cartSession;
        $population['orderDate'] = Carbon::now()->isoFormat('DD mmm YYYY');;
        $population['address'] = $attributes["billing_address"]." ".$attributes["billing_address2"];
    }

        $br = ShoppingCart::select('orderQty','productName','orderSubTotal' )
        ->where('cartSession','=',$cartSession)
        ->orderBy('createdDate','desc')
        ->get();
        $datatable = $br->each->makeHidden(['_id']);
        // debug($datatable->toArray());

        $population['tableCart'] = [
              'titleTable'=>'Cart',
              'titleColor'=>'text-green',
              'thClass'=>['text-70 text-center', 'text-150 text-center', 'text-150 text-center', 'text-150 text-center', 'text-100 text-center', 'text-150 text-center', 'text-150 text-center'],
              'tdTable'=> $datatable
          ];


        if(Auth::check()){
            return response()->json($population, 200);
        }else{
            return response('Unauthorized', 401);
        }

    }

    public function proceedConfirmation(Request $request){
        if(!\Illuminate\Support\Facades\Auth::check()){
            return redirect( env('AUTH_REDIRECT_TO','login'));
        }
        $cartSession = Auth::user()->cartSession;
        $name = Auth::user()->name;

        $payment_option = $request->payment_option;

        $mobile = '';
        $email = '';
        $delivery_option = '';
        $add_info = '';

        $result = $this->model2::where('cartSession','=',$cartSession)->count();

        if($result <= 0){
            $this->model2->created_at = Carbon::now();
            $this->model2->cartSession = $cartSession;
            $this->model2->status = "Proceed";
            $this->model2->buyer = $name;
            $this->model2->mobile = $mobile;
            $this->model2->email = $email;
            $this->model2->add_info = $add_info;
            $this->model2->orderDate = Carbon::now();
            $this->model2->payment_option = $payment_option;
            // $this->model2->shippingCost = $shippingCost;
            $this->model2->save();


        }else{
            $this->model2->where("cartSession","=", $cartSession)
            ->update(
                ["status" => "Proceed",  "payment_option" => $payment_option]
            );
        }
        //moving data from shopping-cart
        $tanggal = Carbon::now()->isoFormat('DDMMYYYY');
        $invNum = Str::random(7);
        $inv = "ECF-".$tanggal.$invNum;


        // Pindahkan/duplikat data shopping cart ke sales order
        $cartShop= $this->model::where('cartSession', $cartSession)->get();

        $salesOrder = array();
        $inventory = array();

        foreach($cartShop as $i => $cartShop)
        {

                // case TOPANG -> PLATINUM
               $salesOrder[$i] = (new SalesOrder())->forceCreate($cartShop->only(['campaignTitle', 'campaignId', 'pricePerLot', 'unitPerLot', 'cartSession', 'ownerId', 'ownerName', 'orderPrice', 'orderSubTotal', 'orderQty', 'orderTime']));
               // Stock to calculate
               $stock = $salesOrder[$i]['orderQty'];

               // Tambah ke inventory
               $inventory[$i] = (new InventoryItem())->forceCreate($cartShop->only(['campaignTitle', 'campaignId', 'cartSession', 'orderSubTotal', 'orderTime', 'picture']));
               $campaignId = $inventory[$i]['campaignId'];

               $product= $this->model5::where('_id', $campaignId)->first();

               // Add to Inventory Stock with status=UNCONFIRMED , change to CONFIRMED after PAYMENT->CONFIRMED
               $this->model4->where("cartSession","=", $cartSession)->where('campaignId','=',$campaignId)
               ->update(
                   ['status' =>  'UNCONFIRMED',
                //    'category' => $product->category,
                   'campaignTitle' => $product->campaignTitle,
                   'lastStock' => 0,
                //    'rate' => $product->rate,
                //    'unit' => $product->unit,
                //    'unitCount' => $product->unitCount,
                   'description' => $product->campaignExecSummary,
                   'stock' => $stock,
                   'buyQty' => $stock,
                   'level' => Auth::user()->level,
                   'masterId' => Auth::user()->_id,
                   'masterName' => Auth::user()->name,
                   'price' => $product->pricePerLot,
                   ]
               );

                // Case TOPANG -> Platinum
                $old_stock = $product->lotEmitted;
                $new_stock = $old_stock - $stock;

                //  Update product stock , set last stock and status to UNCONFIRMED
               $this->model5->where('_id','=',$campaignId)
               ->update(
                   ['status' =>  'UNCONFIRMED',
                   'lotEmitted' => $new_stock,
                   'lastStock' => $old_stock
                   ]
               );



        }

        // $sales= $this->model1::where('cartSession', $cartSession)->get();

        // tambahkan inventory disini...dengan mengambil atribut dari product sekaligus
        // update stok di sumber
        // foreach($sales as $sal)
        // {
            // check if exist in inventory
            // $numInventory = $this->model4::where('productCode','=',$sal->productCode)->count();
            // if($numInventory <= 0){
                // $product= $this->model5::where('productCode', $sal->productCode)->first();

                // $this->model4->created_at = Carbon::now();
                // $this->model4->productCode = $sal->productCode;
                // $this->model4->category = $product->category;
                // $this->model4->productName = $product->productName;
                // $this->model4->stock = $sal->orderQty;
                // $this->model4->lastStock = 0;
                // $this->model4->price = $product->price;
                // $this->model4->rate = $product->rate;
                // $this->model4->unit = $product->unit;
                // $this->model4->unitCount = $product->unitCount;
                // $this->model4->weight = $product->weight;
                // $this->model4->description = $product->description;
                // $this->model4->status = "UNCONFIRMED";
                // $this->model4->masterId = Auth::user()->_id;
                // $this->model4->masterName = Auth::user()->name;
                // $this->model4->level = Auth::user()->level;
                // $this->model4->save();

            // }else{
                    // $this->model4->where("cartSession","=", $cartSession)->where('productCode','=',$product->productCode)
                    // ->update(
                    //     ["status" =>  'UNCONFIRMED', 'category' => $product->category]
                    // );
            // }
            // Ambil jumlah pesanan dari product dgn _id tertentu di shopping cart
            // $orderQty = $cart->orderQty;
            // $_id = $cart->;

            // ambil dari tabel Produk...berapa stok saat ini
            // $stock= Products::where('_id', $_id)->get();
            // stock terbaru
            // $stock_baru = $stock - $orderQty

            // Update ke table Product dengan _id tertentu -> stock = stock terbaru
            // Products::where("_id","=", $_id)
            // ->update(
            //  ["stock" => $stock_baru]
            // );

        // }
        $today =  Carbon::now()->toDateTimeString();
        $sign = [
            '_id' => Auth::user()->_id,
            'approvalInitial' => "",
            'approvalSignature' => "",
            'changeRemarks' => "NEW",
            'changeStatusTo' => "UNPAID",
            'invCode' =>  $inv,
            'changeDate' => Carbon::now(env('DEFAULT_TIME_ZONE'))->toDateTimeString(),
            'createdAt' => $today,
            'changeTo' => "UNPAID",
            'currentStatus' => "UNPAID",
            'signType' => "",
            'actorName' => Auth::user()->name,
            'decideAs' => "Pemodal"
        ];
        $decision[] = $sign;
        $cartShopAt= $this->model2::where('cartSession', $cartSession)->first();

        $this->model3->created_at = Carbon::now();
        $this->model3->cartSession = $cartSession;
        $this->model3->buyer = $name;
        $this->model3->mobile = $cartShopAt['mobile'];
        $this->model3->email = $cartShopAt['email'];
        $this->model3->add_info = $cartShopAt['add_info'];
        $this->model3->orderDate = Carbon::now();
        $this->model3->payment_option = $cartShopAt['payment_option'];
        $this->model3->invCode = $inv;
        $this->model3->ownerId = Auth::user()->_id;
        $this->model3->ownerName = Auth::user()->name;

        // $json = json_encode($cartShop);
        $orders = array(json_encode($cartShop));
        $subTotal = ShoppingCart::select('orderSubTotal')->where('cartSession','=',$cartSession)->sum('orderSubTotal');
        $weight = ShoppingCart::where('cartSession','=',$cartSession)->sum('weight');

        $total = $subTotal + $cartShopAt['shippingCost'];

        $this->model3->orders = $orders;
        $this->model3->subTotal = $subTotal;
        $this->model3->total = $total;
        $this->model3->status = "OPEN";
        $this->model3->decisionList = $decision;
        $this->model3->save();


        // Ubah Session matikan dahulu
        $cartSession = Str::random(16);

        User::where("_id","=", Auth::user()->_id)
         ->update(
             ["cartSession" => $cartSession]
         );

        //  $this->res_path = 'models/controllers/ecf/store';
        //  $this->yml_file = 'payment_controller';

        //  $this->nav_file = 'nav';

        //  $this->title = ' ';

        //  $this->show_title = false;

        //  $this->item_data_url = 'ecf/invoice/data/'.$inv;

        //  $this->item_id = 1;

        //  $this->has_tab = false;

        //  $this->form_mode = 'edit';

        //  $this->form_view = 'form.htmlpage';

        //  $this->form_type = 'html';

        //  $this->form_layout = 'ecf.payment.invoice_layout';

        //  $this->can_autosave = false;

        //  $this->can_lock = true;

        //  $this->can_add = false;

        //  $this->page_refresh_button = true;

        //  $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        //  $this->aux_data = $formOptions;

        //  return parent::formGenerator();
        $url = 'invoice/data/'.$inv;
         return redirect($url);
    }

    public function getData2($id, $additional_data = null){

        $population = [];
        $population['invNumber'] = $id;

        if(Auth::check()){
            return response()->json($population, 200);
        }else{
            return response('Unauthorized', 401);
        }

    }

    public function getInvoice($id, $additional_data = null)
    {
        Util::ajaxDebug();
        $request = Request::capture();

        // if($id){
        $invCode = $id;
        $attributes = Invoice::where('invCode','=',$invCode)->first();

        if($attributes){
            $cartSession = $attributes["cartSession"];
        }else{
            $cartSession = Auth::user()->cartSession;
        }
        $this->res_path = 'models/controllers/ecf/store';
        $this->yml_file = 'payment_controller';

        $this->nav_file = 'nav';

        $this->title = ' ';

        $this->show_title = false;

        $this->item_data_url = 'ecf/invoice/data/';

        $this->item_id = 1;

        $this->has_tab = false;

        $this->form_mode = 'edit';

        $this->form_view = 'form.htmlpage';

        $this->form_type = 'html';

        $this->form_layout = 'ecf.payment.invoice_layout';

        $this->can_autosave = false;

        $this->can_lock = true;

        $this->can_add = false;

        $this->page_refresh_button = true;

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        $this->aux_data = $formOptions;

        return parent::formGenerator();
    }

    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add') . ' ' . $this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.payment.form_layout';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge($uiOptions, $formOptions);

        $this->page_redirect_after_save = false;

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $item = $this->model::where('cartSession','=',$id);
        // $item = $this->model->find($id);

        // $this->item_id = $item->_id;

        // $this->title = __('Edit') . ' ' . $item->_id;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.payment.form_layout';

        $this->runAcl();
        $this->runUrlSet('edit');
        $this->runPageViewSet('edit');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge($uiOptions, $formOptions);

        $this->page_redirect_after_save = false;

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getView(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $cartSession = Auth::user()->cartSession;
        $br = ShoppingCart::select('orderQty','productName','orderSubTotal' )
        ->where('cartSession','=',$cartSession)
        ->orderBy('createdDate','desc')
        ->get();
        $datatable = $br->each->makeHidden(['_id']);
        // debug($datatable->toArray());

        $population['tableCart'] = [
              'titleTable'=>'Cart',
              'titleColor'=>'text-green',
              'thClass'=>['text-70 text-center', 'text-150 text-center', 'text-150 text-center', 'text-150 text-center', 'text-100 text-center', 'text-150 text-center', 'text-150 text-center'],
              'tdTable'=> $datatable
          ];


        if(Auth::check()){
            return response()->json($population, 200);
        }else{
            return response('Unauthorized', 401);
        }
        // return parent::getView($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getViewForm($id)
    {
        $this->res_path = 'models/controllers/ecf/store';
        $this->yml_file = 'payment_controller';

        $this->title = ' ';

        $this->show_title = false;

        $this->item_data_url = 'ecf/invoice/data';

        $this->item_id = 1;

        $this->form_view = 'form.htmlpage';

        $this->form_type = 'html';

        $this->form_layout = 'ecf.payment.invoice_data';

        $this->can_autosave = false;

        $this->can_lock = true;

        $this->can_add = false;

        $this->page_refresh_button = true;

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        $this->aux_data = $formOptions;

        $population = [];

        $population['orderID'] = 'test';

        return parent::formGenerator();
    }

    public function postClone(Request $request)
    {
        $this->revision_key = 'requestNo';
        return parent::postClone($request);
    }

    public function postIndex(Request $request)
    {
        //        $this->defOrderField = 'Item';
        //        $this->defOrderDir = 'asc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function postDel(Request $request)
    {

        //return parent::postDel($request); // TODO: Change the autogenerated stub
    }


    public function additionalQuery($model, Request $request)
    {
        $model = $model->where('cartSession', '=', Auth::user()->cartSession )
            ->groupBy('productName')
            ->orderBy('orderTimestamp', 'desc');
        return $model;
    }

    public function getModel($data, $model)
    {
        $tmodel = $this->model;
        $newmodel = $tmodel->where('cartSession', '=', (Auth::user()->cartSession ?? 'nosession') )
            ->where('productName', '=', $data['productName'])
            ->first();

        if($newmodel){
            $data['orderQty'] += $newmodel->orderQty ?? 0 ;
//            $data['orderSubTotal'] += $newmodel->orderSubTotal ?? 0 ;
            $data['orderSubTotal'] = $data['orderQty'] * $data['orderPrice'];
//            $data['orderPrice'] = $newmodel->orderPrice ?? 0 ;
//            $data['orderNote'] = $newmodel->orderNote ?? '' ;
            $model = $newmodel;
        }

        return parent::getModel($data, $model); // TODO: Change the autogenerated stub
    }


    public function beforeSave($data)
    {
        return parent::beforeSave($data);
    }

    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {

        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {
        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }

    public function externalData($data, $request)
    {
//        $cartdata = $data;
//
//        $cg = [];
//        $total = 0;
//        foreach ($cartdata as $cd){
//            $cg[ $cd['productName'] ] = $cd;
//            $cg[ $cd['productName'] ]['orderQty'] += $cd['orderQty'] ?? 0;
//            $cg[ $cd['productName'] ]['orderSubTotal'] += $cd['orderSubTotal'] ?? 0;
//            $total += $cg[ $cd['productName'] ]['orderSubTotal'];
//        }
//
//        $data = array_values($cg);

        return parent::externalData($data, $request); // TODO: Change the autogenerated stub
    }
}
