<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Ecf\Store;

use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Helpers\Injector;
use App\Http\Controllers\Core\AdminController;
use App\Http\Controllers\Core\PublicController;
use App\Models\Ecf\ShoppingCart;
use App\Models\Ecf\Store\ShoppingCartAttribute;
use App\Models\Core\Mongo\User;
use App\Models\Ecf\SalesOrder;
use App\Models\Ecf\Invoice;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use App\Helpers\RefUtil;
use App\Helpers\App\EcfUtil;
use Illuminate\Support\Str;

class InvoiceController extends PublicController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/ecf/product';

        $this->yml_file = 'promo_controller';

        $this->entity = 'Promo';

        $this->auth_entity = 'front-promo';

        $this->controller_base = 'promo';

        $this->view_base = 'ecf.product.frontpromo';

        $this->model = new Invoice();
    }

    public function getIndex()
    {
        $this->title = __('Promo');

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
        * Set form layout
        */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.product.frontpromo.form_layout';
        $this->form_dialog_size = 'lg';

        /**
        * Set Viewer layout
        */
        $this->viewer_layout = 'ecf.product.frontpromo.view_layout';
        $this->viewer_dialog_size = 'lg';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->add_as_page = false;
        $this->edit_as_page = false;
        $this->with_advanced_search = false;
        $this->update_title_fields = '"<h4>'.__('Edit')." ".'" + this.name + "</h4>"';
        $this->view_title_fields = '"<h4>'.__('View')." ".'" + this.name + "</h4>"';

        $this->page_refresh_button = true;

        $this->table_component = 'grid-view';

        $this->grid_item_view = 'ecf.product.frontpromo.product_item';

        $this->grid_card_layout = 'card-columns';

        //$this->grid_card_class = 'w-25';
        $this->bootstrap_version = 5;

        return parent::getIndex();
    }

    public function getList(Request $request, $keyword0, $keyword1 = null, $keyword2 = null)
    {

    }


    public function setupInjector($uiOptions, $data = null)
    {
        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }

    public function setupFormOptions($formOptions, $data = null)
    {

        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }

    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add').' '.$this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.product.frontpromo.form_layout';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        echo $id;
        $invoice = Invoice::where('invCode', $id)->get();
        // if(!\Illuminate\Support\Facades\Auth::check()){
        //     return redirect( env('AUTH_REDIRECT_TO','login'));
        // }
        // $invoice = $this->model::where('cartSession','=','M8rqT7XfTbSV7NSf')->get();
        // print_r($invoice);

        $population = [];
        $population['invNumber'] = $id;

        // $population['invNumber'] = $invoice["invCode"];
        // $population['fname'] = $invoice["fname"];
        // $population['lname'] = $invoice["lname"];
        // $population['billing_address'] = $invoice["billing_address"];
        // $population['billing_address2'] = $invoice["billing_address2"];
        // $population['shippingCost'] = $invoice["shippingCost"];
        // $population['cartSession'] = $invoice["cartSession"];
        // $population['city'] = $invoice["city"];
        // $population['zipcode'] = $invoice["zipcode"];
        // $population['mobile'] = $invoice["mobile"];
        // $population['email'] = $invoice["email"];
        // $population['payment_option'] = $invoice["payment_option"];
        // $population['delivery_option'] = $invoice["delivery_option"];
        // $population['weight'] = $invoice["weight"];
        // $population['total'] = $invoice["total"];
        // $cartSession = $invoice["cartSession"];
        // $population['subTotal'] = $invoice["subTotal"];

        // $br = ShoppingCart::where('cartSession','=',$cartSession)
        // ->orderBy('createdDate','desc')
        // ->get();
        // $datatable = $br->each->makeHidden(['_id']);
        // // debug($datatable->toArray());

        // $population['tableCart'] = [
        //       'titleTable'=>'Cart',
        //       'titleColor'=>'text-green',
        //       'thClass'=>['text-70 text-center', 'text-150 text-center', 'text-150 text-center', 'text-150 text-center', 'text-100 text-center', 'text-150 text-center', 'text-150 text-center'],
        //       'tdTable'=> $datatable
        //   ];


        if(Auth::check()){
            return response()->json($population, 200);
        }else{
            return response('Unauthorized', 401);
        }

    }

    public function getView(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $invoice = $this->model::where('cartSession','=','M8rqT7XfTbSV7NSf')->get();
        // $invoice = $this->model::where('invCode', $id)->first();
        // if(!\Illuminate\Support\Facades\Auth::check()){
        //     return redirect( env('AUTH_REDIRECT_TO','login'));
        // }

        // echo $cartSession;
        // $cartSession = Auth::user()->cartSession;
        // $fullname = Auth::user()->fullname;


        $this->res_path = 'models/controllers/ecf/store';
        $this->yml_file = 'payment_controller';

        $this->nav_file = 'nav';

        $this->title = ' ';

        $this->show_title = false;

        $this->item_data_url = 'invoice/edit/'.$id;
        echo $this->item_data_url;

        $this->item_id = 1;

        $this->has_tab = false;

        $this->form_mode = 'edit';

        $this->form_view = 'form.htmlpage';

        $this->form_type = 'html';

        $this->form_layout = 'ecf.payment.invoice_layout';

        $this->can_autosave = false;

        $this->can_lock = true;

        $this->can_add = false;

        $this->page_refresh_button = true;

        // $this->page_additional_view = 'ecf.admin.dashboard.toolbar';

        $formOptions = Util::loadResYaml($this->yml_file,$this->res_path)->toFormOption();

        // $formOptions['companyName'] = "''";

        // // $defaultRange = [
        // //         Carbon::now()->startOfYear()->toDateString(),
        // //         Carbon::now()->endOfYear()->toDateString(),
        // //     ];

        // // $this->extra_query = [
        // //     'fromDate'=>$defaultRange,
        // //     'untilDate'=>'',
        // // ];

        $this->aux_data = $formOptions;

        return parent::formGenerator();
    }

    public function postClone(Request $request)
    {
        $this->revision_key = 'requestNo';
        return parent::postClone($request);
    }

    public function postIndex(Request $request)
    {
//        $this->defOrderField = 'Item';
//        $this->defOrderDir = 'asc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        return $model;
    }

    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        return parent::beforeSave($data);
    }

    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {

        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }

}
