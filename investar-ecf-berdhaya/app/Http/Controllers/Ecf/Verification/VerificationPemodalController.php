<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Ecf\Verification;

use App\Helpers\App\DwfUtil;
use App\Helpers\App\MmsUtil;
use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\RefUtil;
use App\Helpers\App\EcfUtil;
use App\Helpers\Util;
use App\Helpers\Injector;
use App\Helpers\WorkflowUtil;
use App\Http\Controllers\Core\AdminController;
use App\Models\Core\Mongo\Role;
use App\Models\Ecf\BizProfile;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage; 

class VerificationpemodalController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/ecf/profiles';

        $this->yml_file = 'pemodal_profile_controller';

        $this->entity = 'Verif pemodal';

        $this->auth_entity = 'pemodal-verif';

        $this->controller_base = 'ecf/pemodal/verif';

        $this->view_base = 'ecf.verificationpemodal';

        $this->title_fields = 'name';

        $this->model = new User();
    }

    public function getIndex()
    {
        $this->extra_query = [
            'maritalStatus'=>'',
            'IdCardAddress'=>'',
            'investmentPreference'=>'',
            'investorType'=>'',

        ]; 

        $this->title = 'Verif pemodal';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
         * Set form layout
         */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.verificationpemodal.form_layout';
        $this->form_dialog_size = 'lg';

        /**
         * Set Viewer layout
         */
        $this->viewer_layout = 'ecf.verificationpemodal.view_layout';
        $this->viewer_dialog_size = 'lg';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        // $this->can_multi_approve = false;
        // $this->with_advanced_search = false;
        $this->with_advanced_search = true;

        $this->add_as_page = true;
        $this->edit_as_page = true;
        $this->can_add = false;
        $this->can_approve = true;

        $this->add_filler = false;

        return parent::getIndex();
    }

    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add') . ' ' . $this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.verificationpemodal.form_layout';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge($uiOptions, $formOptions);

        $this->page_redirect_after_save = true;

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $item = $this->model->find($id);

        $this->item_id = $item->_id;

        $this->title = __('Edit') . ' ' . $item->firstName;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.verificationpemodal.form_layout';

        $this->runAcl();
        $this->runUrlSet('edit');
        $this->runPageViewSet('edit');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge($uiOptions, $formOptions);

        $this->page_redirect_after_save = true;

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }
    public function setupInjector($uiOptions, $data = null)
    {
        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }

    // public function setupFormOptions($formOptions, $data = null)
    // {
    //     $formOptions['approvalDetailTemplate'] = '`' . view('ecf.verificationpemodal.approvaldetail')->render() . '`';
    //     $formOptions['approvalDetail'] = "{}";

    //     return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    // }

    public function setupFormOptions($formOptions, $data = null)
    {
        $formOptions['genderOptions'] = [
            ['text' => 'Perempuan', 'value' => 'Perempuan'],
            ['text' => 'Laki-laki', 'value' => 'Laki-laki'],
        ];
        $formOptions['maritalStatusOptions'] = EcfUtil::toOptions( EcfUtil::getmaritalStatus(), 'name', 'name', false ) ;
        $formOptions['bankNameOptions'] = EcfUtil::toOptions( EcfUtil::getBank(), 'name', 'name', false ) ;
        $formOptions['investorTypeOptions'] = EcfUtil::toOptions( EcfUtil::getInvestorType(), 'name', 'name', false ) ;
        $formOptions['investmentGoalOptions'] = EcfUtil::toOptions( EcfUtil::getInvestmentGoal(), 'name', 'name', false ) ;
        $formOptions['investmentPreferenceOptions'] = EcfUtil::toOptions( EcfUtil::getInvestmentPreference(), 'name', 'name', false ) ;
        $formOptions['citizenshipOptions'] = EcfUtil::toOptions( EcfUtil::getcitizenship(), 'name', 'name', false ) ;
        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }

    public function setupApprovalParams($formOptions)
    {

        $formOptions['approvalDetailTemplate'] = '`' . view('ecf.verificationpemodal.approvaldetail')->render() . '`';
        $formOptions['approvalDetail'] = "{}";

        $formOptions['docHistory'] = [];
        $formOptions['docHistoryTitle'] = '""';
        return $formOptions;
    }

    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        return parent::beforeSave($data);
    }
    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {

        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }
    public function processApprovalData($data, $request)
    {
        $selected = $data['selectedApprovalItems'];

        $chg = $data['changeStatusTo'];

        $data['approvalStatus'] = $chg;
        $idx = 0;
        $decisionListObj = [];
        foreach ($selected as $sel) {
            //            print $sel['_id']."\r\n";
            //            print_r($sel);
            $decision = $sel['decisionList'] ?? [];

            if ($data['approvalSignature'] == 'specimen') {
                $data['approvalSignature'] = $this->getSpecimen();
            }

            if ($data['approvalInitial'] == 'specimen') {
                $data['approvalInitial'] = $this->getSpecimen('initial');
            }

            $today =  Carbon::now()->toDateTimeString();
            $sign = [
                '_id' => Auth::user()->_id,
                'approvalInitial' => $data['approvalInitial'],
                'approvalSignature' => $data['approvalSignature'],
                'changeDate' => Carbon::now(env('DEFAULT_TIME_ZONE')),
                'createdAt' => $today,
                'changeRemarks' => $data['changeRemarks'],
                'changeStatusTo' => $data['changeStatusTo'],
                'changeTo' => $data['approvalStatus'],
                'currentStatus' => $data['currentStatus'],
                'signType' => $data['signType'],
                'actorName' => Auth::user()->name,
                'decideAs' => $sel['decideAs']
            ];

            $decision[] = $sign;

            $doc = $this->model->find($sel['_id']);
            if ($doc) {
                $doc->decisionList = $decision;
                $doc->approvalStatus = $data['approvalStatus'];
                $doc->revLock = 1;
                $doc->save();
                $decisionListObj[$sel['_id']] = $decisionListObj[$sel['_id']] ?? [];
                $decisionListObj[$sel['_id']] = $sign;
            }
        }

        $data['decisionList'] = $decisionListObj;

        return parent::processApprovalData($data, $request); // TODO: Change the autogenerated stub
    }


    public function approvalItemTransform($items)
    {
        $its = [];
        foreach ($items as $item) {
            $item['approvalTitle'] = $item['name'] ?? '-';
            $item['approvalDescription'] = $item['approvalStatus'] ?? '-';

            $as = '';
            $initial = false;

            $as = 'auditedBy';
            $sign = false;

            $item['decideAs'] = $as;
            $item['needSigning'] = $sign;
            $item['needReview'] = $initial;

            $its[] = $item;
        }

        $items = $its;

        return parent::approvalItemTransform($items); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {
        /* modify or add new fields */
        //$row['linkConsult'] = url('clinic/patient/km/'.$row['_id']);
        //$row['linkOp'] = url('clinic/patient/op/'.$row['_id']);

        $as = false;
        $initial = false;
        $approverName = Auth::user()->name;
        $changeDate = Carbon::now(env('DEFAULT_TIME_ZONE'))->toDateTimeString();

        $as = 'verifBy';
        $sign = true;
        $showpad = false;

        $row['decideAs'] = $as;
        $title = $row['name'] ?? "-";
        $row['decideAsTitle'] = $title;
        $row['needSigning'] = $sign;
        $row['needReview'] = $initial;
        $row['showSignPad'] = $showpad;
        $row['approverName'] = $approverName;
        $row['changeDate'] = $changeDate;

        return parent::rowPostProcess($row);
    }
    
    // public function additionalQuery($model, Request $request)
    // {
    //     /* sample query modifier */
    //     $model = $model->where('roleSlug', 'pemodal')->where('approvalStatus', 'UNVERIFIED')->orderBy('updatedAt', 'desc');
    //     return $model;
    // }

    public function additionalQuery($model, Request $request)
    {
         $model = $model->where('roleSlug', 'pemodal')->where('approvalStatus', 'UNVERIFIED')->orderBy('updatedAt', 'desc');

        $adv = $request->get('advancedSearch') ?? false;
        $ext = $request->get('extraData') ?? false;
        if( $adv && $ext &&  (isset($adv['enable']) && $adv['enable']) && $adv['isOpen']){

            if( isset($ext['maritalStatus']) && $ext['maritalStatus'] != '' ){
                $maritalStatus = explode(',', $ext['maritalStatus'] );

                $model = $model->where(function($q) use ( $maritalStatus) {
                    for($i = 0; $i < count($maritalStatus); $i++){
                        if($i == 0){
                            $q = $q->where('maritalStatus','like','%'.$maritalStatus[$i].'%');
                        }else{
                            $q = $q->orWhere('maritalStatus','like','%'.$maritalStatus[$i].'%');
                        }
                    }
                });
            }

            if( isset($ext['IdCardAddress']) && $ext['IdCardAddress'] != '' ){
                $IdCardAddress = explode(',', $ext['IdCardAddress'] );

                $model = $model->where(function($q) use ( $IdCardAddress) {
                    for($i = 0; $i < count($IdCardAddress); $i++){
                        if($i == 0){
                            $q = $q->where('IdCardAddress','like','%'.$IdCardAddress[$i].'%');
                        }else{
                            $q = $q->orWhere('IdCardAddress','like','%'.$IdCardAddress[$i].'%');
                        }
                    }
                });
            }

            if( isset($ext['investorType']) && $ext['investorType'] != '' ){
                $investorType = explode(',', $ext['investorType'] );

                $model = $model->where(function($q) use ( $investorType) {
                    for($i = 0; $i < count($investorType); $i++){
                        if($i == 0){
                            $q = $q->where('investorType','like','%'.$investorType[$i].'%');
                        }else{
                            $q = $q->orWhere('investorType','like','%'.$investorType[$i].'%');
                        }
                    }
                });
            }

            if( isset($ext['investmentPreference']) && $ext['investmentPreference'] != '' ){
                $investmentPreference = explode(',', $ext['investmentPreference'] );

                $model = $model->where(function($q) use ( $investmentPreference) {
                    for($i = 0; $i < count($investmentPreference); $i++){
                        if($i == 0){
                            $q = $q->where('investmentPreference','like','%'.$investmentPreference[$i].'%');
                        }else{
                            $q = $q->orWhere('investmentPreference','like','%'.$investmentPreference[$i].'%');
                        }
                    }
                });
            }
        }

        return $model;
    }
    public function getHistory(Request $request)
    {

        $id = $request->itemId;
        $history = $this->model::where('_id', '=', $id)->first();

        if ($history) {
            $this->def_param = $history->toArray();
            $decisionList = array_reverse($this->def_param['decisionList']);

            return response()->json(
                [
                    'result' => 'OK',
                    'msg' => 'OK',
                    'id' => $id,
                    'requestNo' => $history->requestNo,
                    'data' => $decisionList
                ],
                200
            );
        } else {
            return response()->json(
                [
                    'result' => 'ERR',
                    'msg' => 'ERR',
                    'id' => $id,
                    'data' => []
                ],
                415
            );
        }
    }
}