<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Ecf;

use App\Helpers\App\EcfUtil;
use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Helpers\Injector;
use App\Helpers\RefUtil;
use App\Http\Controllers\Core\AdminController;
use App\Models\Ecf\BizProfile;
use App\Models\Ecf\BizType;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Storage;

class BizProfileController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/ecf';

        $this->yml_file = 'bizprofile_controller';

        $this->entity = 'Business Profile';

        $this->auth_entity = 'biz-profile';

        $this->controller_base = 'ecf/bizprofile';

        $this->view_base = 'ecf.bizprofile';

        $this->upsert_mode = true;

        $this->is_step_page = false;

        $this->model = new BizProfile();
    }

    public function getIndex()
    {
        $this->title = 'Business Profile';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
        * Set form layout
        */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.bizprofile.form_layout';
        $this->form_dialog_size = 'lg';

        /**
        * Set Viewer layout
        */
        $this->viewer_layout = 'ecf.bizprofile.view_layout';
        $this->viewer_dialog_size = 'lg';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();

        $this->add_as_page = true;
        $this->edit_as_page = true;

        // $this->add_page_base = $this->controller_base.'/step/1';
        // $this->edit_page_base = $this->controller_base.'/step/1';

        $this->add_filler = false;
        $this->extra_query = [
            'bizRegisteredName'=>'',
            'bizType'=>'',
            'bizCompanyType'=>'',
            // 'assetRegDate' => '',
        ];

        return parent::getIndex();
    }

    public function getStep(Request $request, $step = 0, $id = null, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __($this->entity);
        $this->is_step_page = true;

        /* Use custom form layout */
        $step = $step ?? 1;

        $formlayout = 'ecf.bizprofile.step_'.$step;

        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = $formlayout;

        $this->nav_file = 'new_user_nav';

        $this->page_class = 'col-lg-8 col-md-12 col-xs-12';

        $this->form_mode = 'edit';

        $mode = $this->form_mode;

        $this->runAcl();
        $this->runUrlSet($mode);
        $this->runPageViewSet($mode);

        $this->non_closing_save = true;

        $this->page_redirect_after_save = false;

        $this->current_step = $step;
        $this->num_step_page = 4;
        $this->step_progress = [
            [
                'title'=>'Info Usaha',
                'description'=>'Informasi Usaha',
                'active'=>( $this->current_step >= 1 )
            ],
            [
                'title'=>'Lampiran',
                'description'=>'Dokumen Usaha',
                'active'=>( $this->current_step >= 2 )
            ],
            [
                'title'=>'Info Finansial',
                'description'=>'Informasi Keuangan & Lampiran',
                'active'=>( $this->current_step >= 3 )
            ],
            [
                'title'=>'Selesai',
                'description'=>'Informasi Tambahan',
                'active'=>( $this->current_step >= 4 )
            ],
        ];

        return parent::getStep($request, $step, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function setupInjector($uiOptions, $data = null)
    {
        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        $formOptions['bizProfileIdOptions'] = RefUtil::toOptions(EcfUtil::getBizProfile(),'bizRegisteredName','_id', false);

        $formOptions['bizCompanyTypeOptions'] = RefUtil::toOptions(RefUtil::getCompanyTypes(),'companyType','companyType', false);

        $formOptions['bizTypeOptions'] = RefUtil::toOptions(EcfUtil::getBizType(),'name','name', false);
        $formOptions['getToKnowInvestarOptions'] = RefUtil::toOptions(EcfUtil::getKnowInvestar(),'name','name', false);
        $formOptions['typeOfFundingOptions'] = RefUtil::toOptions(EcfUtil::getFundingType(),'name', 'name', false);
        // $formOptions['marketingFunnelsOptions'] = [
        //     ['text'=>'', 'value'=>''],
        //     ['text'=>'Pabrik Langsung Ke Pelanggan', 'value'=>'direct'],
        //     ['text'=>'Pabrik ke Pengecer ke Pelanggan', 'value'=>'fromRetailer'],
        //     ['text'=>'Pabrik ke Agen ke Pedagang Besar ke Pengecer ke Pelanggan', 'value'=>'fromAgen']
        // ];
        $formOptions['marketingFunnelsOptions'] = RefUtil::toOptions(EcfUtil::getMarketingFunnels(),'name','name', false);
        $formOptions['noOfBranchesOptions'] = RefUtil::toOptions(EcfUtil::getNoOfBranches(),'name', 'name', false);
        $formOptions['positionOptions'] = RefUtil::toOptions(EcfUtil::getPositionInCompany(),'name', 'name', false);

        $formOptions['legalityOptions'] = [
            ['text'=>'YA', 'value'=>'CONFIRMED']
        ];
        // $formOptions['noOfBranchesOptions'] = [
        //     ['text'=>'', 'value'=>''],
        //     ['text'=>'1', 'value'=>'One'],
        //     ['text'=>'2 - 10', 'value'=>'TwoToTen'],
        //     ['text'=>'11 - 50', 'value'=>'ElevenToFifty'],
        //     ['text'=>'50+', 'value'=>'MoreThenFifty']
        // ];
        $tahun = Carbon::now()->isoFormat('YYYY');
        $year = [];
        foreach (range( $tahun, 1900) as $yr){
            $year[] = [ 'text'=>$yr, 'value'=>$yr ];
        }

        $formOptions['establishedSinceYearOptions'] = $year;

        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }

    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add').' '.$this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.bizprofile.form_layout';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $item = $this->model->find($id);

        $this->item_id = $item->_id;

        $this->title = __('Edit').' '.$this->entity;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        $this->form_layout = 'ecf.bizprofile.form_layout';

        $this->runAcl();
        $this->runUrlSet('edit');
        $this->runPageViewSet('edit');

        // $this->is_step_page = true;

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        // $this->page_class = 'col-lg-6 col-md-10 col-xs-12';

        $this->bottom_action = true;

        $this->save_button_label = 'Next';

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getView(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        return parent::getView($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function postClone(Request $request)
    {
        $this->revision_key = 'requestNo';
        return parent::postClone($request);
    }

    public function postIndex(Request $request)
    {
//        $this->defOrderField = 'Item';
//        $this->defOrderDir = 'asc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        if(AuthUtil::isAdmin()){
            $model = $model->orderBy('ownerId');
        }else{
            $model = $model->where('ownerId', '=', Auth::user()->_id );
        }
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        $adv = $request->get('advancedSearch') ?? false;
        $ext = $request->get('extraData') ?? false;
        if( $adv && $ext &&  (isset($adv['enable']) && $adv['enable']) && $adv['isOpen']){
            // query hanya dilakukan jika advanced search aktif dan panel terbuka
            $model = $this->advQuery($model , $ext);
        }

        

        return $model;
    }

    public function advQuery($model , $ext){

        if( isset($ext['bizType']) && $ext['bizType'] != '' ){
            $model = $model->where('bizType','=',$ext['bizType']);
        }
        if( isset($ext['bizCompanyType']) && $ext['bizCompanyType'] != '' ){
            $model = $model->where('bizCompanyType','=',$ext['bizCompanyType']);
        }
        if( isset($ext['bizRegisteredName']) && $ext['bizRegisteredName'] != '' ){
            $model = $model->where('bizRegisteredName','=',$ext['bizRegisteredName']);
        }

        return $model;
    }

    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        // $data['campaignStatus'] = "DRAFT";

        return parent::beforeSave($data);
    }

    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {

        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }

}
