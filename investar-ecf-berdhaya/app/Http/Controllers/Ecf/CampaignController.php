<?php
/**
 * Created by PhpStorm.
 * User: awidarto
 * Date: 13/12/19
 * Time: 23.33
 */
namespace App\Http\Controllers\Ecf;

use App\Helpers\App\EcfUtil;
use App\Helpers\AuthUtil;
use App\Helpers\ImportUtil;
use App\Helpers\Util;
use App\Helpers\Injector;
use App\Helpers\RefUtil;
use App\Http\Controllers\Core\AdminController;
use App\Models\Ecf\BizProfile;
use App\Models\Ecf\Campaign;
use App\Models\Ecf\BizType;
use App\Models\Core\Mongo\User;
use Illuminate\Http\Request;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;

class CampaignController extends AdminController

{
    public function __construct()
    {
        parent::__construct();

        $this->res_path = 'models/controllers/ecf';

        $this->yml_file = 'campaign_controller';

        $this->entity = 'Campaign';

        $this->auth_entity = 'campaign';

        $this->controller_base = 'ecf/campaign';

        $this->view_base = 'ecf.campaign';

        $this->model = new Campaign();
    }

    public function getIndex()
    {
        $this->title = 'Campaign';

        $cname = substr(strrchr(get_class($this), '\\'), 1);
        $this->controller_name = str_replace('Controller', '', $cname);
        $this->show_title = true;
        /**
        * Set form layout
        */
        // $this->form_view = 'form.html'; // use plain html
        // $this->form_layout = 'ecf.campaign.form_layout';
        // $this->form_dialog_size = 'lg';

        /**
        * Set Viewer layout
        */
        $this->viewer_layout = 'ecf.campaign.view_layout';
        $this->viewer_dialog_size = 'lg';

        $this->runAcl();
        $this->runUrlSet();
        $this->runViewSet();
        $this->runMoreMenu();
        
        if (Auth::user()->approvalStatus == 'VERIFIED') {
            if(Auth::user()->roleSlug == 'penerbit'){
                $this->can_add = true;
            }else{
                $this->can_add = false;
            }
            $this->form_view = 'form.html'; // use plain html
            $this->form_layout = 'ecf.campaign.form_layout';
            $this->form_dialog_size = 'lg';
        }else{
            $this->can_add = false;
            $this->form_view = 'form.html'; // use plain html
            $this->form_layout = 'ecf.admin.dashboard.noaccess';
            $this->form_dialog_size = 'lg';
        }
        
        $this->add_as_page = true;
        $this->edit_as_page = true;

        $this->add_filler = false;
        $this->extra_query = [
            'bizRegisteredName'=>'',
            'bizType'=>'',
            'bizCompanyType'=>'',
            // 'assetRegDate' => '',
        ];

        return parent::getIndex();
    }

    public function setupInjector($uiOptions, $data = null)
    {
        return parent::setupInjector($uiOptions, $data); // TODO: Change the autogenerated stub
    }

    public function setupFormOptions($formOptions, $data = null)
    {
        $formOptions['bizProfileIdOptions'] = RefUtil::toOptions(EcfUtil::getBizProfile(),'bizRegisteredName','_id', false);
        $formOptions['bizProfileNameOptions'] = RefUtil::toOptions(EcfUtil::getBizProfile(),'bizRegisteredName','bizRegisteredName', false);

        $formOptions['bizCompanyTypeOptions'] = RefUtil::toOptions(RefUtil::getCompanyTypes(),'companyType','companyType', false);

        $formOptions['bizTypeOptions'] = RefUtil::toOptions(EcfUtil::getBizType(),'name','name', false);
        $formOptions['typeOfFundingOptions'] = EcfUtil::toOptions(EcfUtil::getFundingType(),'name', 'name', false);
        // $formOptions['marketingFunnelsOptions'] = [
        //     ['text'=>'', 'value'=>''],
        //     ['text'=>'Pabrik Langsung Ke Pelanggan', 'value'=>'direct'],
        //     ['text'=>'Pabrik ke Pengecer ke Pelanggan', 'value'=>'fromRetailer'],
        //     ['text'=>'Pabrik ke Agen ke Pedagang Besar ke Pengecer ke Pelanggan', 'value'=>'fromAgen']
        // ];
        $formOptions['marketingFunnelsOptions'] = RefUtil::toOptions(EcfUtil::getMarketingFunnels(),'name','name', false);
        $formOptions['legalityOptions'] = [
            ['text'=>'YA', 'value'=>'CONFIRMED']
        ];
        // $formOptions['noOfBranchesOptions'] = [
        //     ['text'=>'', 'value'=>''],
        //     ['text'=>'1', 'value'=>'One'],
        //     ['text'=>'2 - 10', 'value'=>'TwoToTen'],
        //     ['text'=>'11 - 50', 'value'=>'ElevenToFifty'],
        //     ['text'=>'50+', 'value'=>'MoreThenFifty']
        // ];
        $formOptions['noOfBranchesOptions'] = RefUtil::toOptions(EcfUtil::getNoOfBranches(),'name', 'name', false);
        $formOptions['contractReferenceOptions'] = [
                ['text'=>'Memiliki', 'value'=>'Memiliki'],
                ['text'=>'Tidak Memiliki', 'value'=>'Tidak Memiliki']
            ];
        $tahun = Carbon::now()->isoFormat('YYYY');
        $year = [];
        foreach (range( $tahun, 1900) as $yr){
            $year[] = [ 'text'=>$yr, 'value'=>$yr ];
        }

        $formOptions['establishedSinceYearOptions'] = $year;
        return parent::setupFormOptions($formOptions, $data); // TODO: Change the autogenerated stub
    }

    public function getAdd(Request $request, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $this->title = __('Add').' '.$this->entity;

        /* Use custom form layout */
        if (Auth::user()->approvalStatus == 'VERIFIED') {
            // $this->can_add = true;
            $this->form_view = 'form.html'; // use plain html
            $this->form_layout = 'ecf.campaign.form_layout';
            // $this->form_dialog_size = 'lg';
        }else{
            $this->form_view = 'form.html'; // use plain html
            $this->form_layout = 'ecf.admin.dashboard.noaccess';
            // $this->form_dialog_size = 'lg';
        }
        // $this->form_view = 'form.html'; // use plain html
        // $this->form_layout = 'ecf.campaign.form_layout';

        $this->runAcl();
        $this->runUrlSet('add');
        $this->runPageViewSet('add');
        if (Auth::user()->approvalStatus == 'VERIFIED') {
            $this->can_save = true; // use plain html
        }else{
            $this->can_save = false; // use plain html
        }

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        return parent::getAdd($request, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getEdit(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        $item = $this->model->find($id);

        $this->item_id = $item->_id;

        $this->title = __('Edit').' '.$item->campaignTitle;

        /* Use custom form layout */
        $this->form_view = 'form.html'; // use plain html
        if ($item->campaignStatus == 'DECLINED') {
            $this->form_layout = 'ecf.campaign.campaign_declined';
            $this->form_mode = 'view';
            $this->can_save = false;
        }else{
            $this->form_layout = 'ecf.campaign.form_layout';
            
            $this->runAcl();
        }
        $this->runUrlSet('edit');
        $this->runPageViewSet('edit');

        $uiOptions = [];

        $uiOptions = $this->setupInjector($uiOptions);

        $formOptions = Util::loadResYaml($this->yml_file, $this->res_path)->toFormOption();

        $formOptions = $this->setupFormOptions($formOptions);

        $this->aux_data = array_merge( $uiOptions ,$formOptions);

        $this->page_redirect_after_save = true;

        return parent::getEdit($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function getView(Request $request, $id, $keyword0 = null, $keyword1 = null, $keyword2 = null)
    {
        return parent::getView($request, $id, $keyword0, $keyword1, $keyword2); // TODO: Change the autogenerated stub
    }

    public function postClone(Request $request)
    {
        $this->revision_key = 'requestNo';
        return parent::postClone($request);
    }

    public function postIndex(Request $request)
    {
//        $this->defOrderField = 'Item';
//        $this->defOrderDir = 'asc';
        return parent::postIndex($request); // TODO: Change the autogenerated stub
    }

    public function additionalQuery($model, Request $request)
    {
        if(AuthUtil::isAdmin()){
            $model = $model->orderBy('ownerId');
        }else{
            $model = $model->where('ownerId', '=', Auth::user()->_id );
        }
        /* sample query modifier */
        //$model = $model->where('roleId','=', AuthUtil::getRoleId('Employee') );
        $adv = $request->get('advancedSearch') ?? false;
        $ext = $request->get('extraData') ?? false;
        if( $adv && $ext &&  (isset($adv['enable']) && $adv['enable']) && $adv['isOpen']){
            // query hanya dilakukan jika advanced search aktif dan panel terbuka
            $model = $this->advQuery($model , $ext);
        }
        return $model;
    }
    public function setupApprovalParams($formOptions)
    {

        $formOptions['docHistory'] = [];
        $formOptions['docHistoryTitle'] = '""';
        return $formOptions;
    }

    public function advQuery($model , $ext){

        if( isset($ext['bizType']) && $ext['bizType'] != '' ){
            $model = $model->where('bizType','=',$ext['bizType']);
        }
        if( isset($ext['bizCompanyType']) && $ext['bizCompanyType'] != '' ){
            $model = $model->where('bizCompanyType','=',$ext['bizCompanyType']);
        }
        if( isset($ext['bizRegisteredName']) && $ext['bizRegisteredName'] != '' ){
            $model = $model->where('bizRegisteredName','=',$ext['bizRegisteredName']);
        }
        return $model;
    }
    public function beforeSave($data)
    {
        /* sample callback / hook */
        //$data['roleId'] = AuthUtil::getRoleId('Employee');
        $data['campaignStart'] = $data['campaignPeriod'][0];
        $data['campaignEnd'] = $data['campaignPeriod'][1];
        $data['campaignStatus'] = "DRAFT";
        $data['totalLot'] = $data['lotEmitted'];

        return parent::beforeSave($data);
    }

    public function beforeUpdateForm($population)
    {
        return parent::beforeUpdateForm($population); // TODO: Change the autogenerated stub
    }

    public function beforeUpdate($id, $data)
    {
        if ($data['campaignStatus'] = "DECLINED") {
            $data['campaignStatus'] = "DRAFT";
        }
        return parent::beforeUpdate($id, $data); // TODO: Change the autogenerated stub
    }

    public function getParam()
    {
        if(request()->has('biz')){
            $bizNo = request()->get('biz');

            $pr = BizProfile::find(trim($bizNo));

            if($pr){
                $pr = $pr->toArray();
                unset($pr['id']);
                unset($pr['_id']);
                unset($pr['itemId']);
                $pr['bizProfileId'] = $bizNo;
                $this->def_param = $pr;

//                $poNumber = str_replace('PR-', 'PO-', $this->def_param['requestNoPrefix'].'-'.$this->def_param['rev']);
//                $this->def_param['purchaseOrderDate'] = $this->def_param['requestDate'];
//                $this->def_param['orderNo'] = $poNumber;
//                $this->def_param['approvalStatus'] = '';

            }
        }

//        if(request()->has('companyName')){
//            $companyName = request()->get('companyName');
//            $noNpwp = Company::where('companyName', '=', trim($companyName))->pluck('noNpwp')->first();
//
//            if($noNpwp){
//                $this->def_param['noNpwp'] = $noNpwp;
//            }
//        }
//
//        //$this->def_param['rev'] = 0;
//        $this->def_param['UnitPrice'] = 'IDR';
//        $this->def_param['authorizedBy'] = '';

        return parent::getParam(); // TODO: Change the autogenerated stub
    }

    public function postYearCalculate(Request $request)
    {
        $establishedSinceYear = $request->get('establishedSinceYear');
        $tahun = Carbon::now()->isoFormat('YYYY');
        $establishedYear = $tahun - $establishedSinceYear;
        
        

            return response()->json([
                'result'=>'OK',
                'establishedYear'=>$establishedYear ?? 0,
                'requestBy'=> Auth::user()->_id ?? '',
                'requestName'=> Auth::user()->name ?? '',
            ]);
        
        // }else{
        //     return response()->json([
        //         'result'=>'ERR',
        //         'msg'=>'NOENTITY-YA'
        //     ]);
        // }

    }


    public function campaignDeclined(Request $request, $id)
    {
        $campaign = Campaign::where('_id', '=', $id)->first();
        $status = $campaign['campaignStatus'];
        if ($status = "DECLINED") {
            $campaign->update(
                [
                "campaignStatus" => "DRAFT",
                "approvalStatus" => "DRAFT",
                ]
            );
        }
        

        return redirect()->back()->with('msg', 'Silahkan Edit Campaign Anda, Lalu Save Untuk Mengirim Ulang Permintaan Verifikasi');
        
    }

    protected function rowPostProcess($row)
    {

        return parent::rowPostProcess($row);
    }

    public function beforeImportCommit($data)
    {

        return parent::beforeImportCommit($data); // TODO: Change the autogenerated stub
    }

    /** function untuk post get sequence purchase rquisition number */

    public function postGetSeq(Request $request)
    {
        $entity = $request->get('entity');
        $company = $request->get('company');

        if( $request->has('padding') ){
            $padding = $request->get('padding')??env('NUM_PAD', 1);
        }else{
            $padding = env('NUM_PAD', 1);
        }

        if( is_null($entity) && $entity != ''){
            $seq = false;
        }else{
            $rec = $this->model->where('PurchaseReqPrefix', '=', $entity)->max('purchaseSequence');
            $seq = $rec + 1;
        }

        //$seq = CedarUtil::getSequence($entity);

        if($seq){
            return response()->json([
                'result'=>'OK',
                'entity'=>$entity,
                'seq'=>$seq,
                'padded'=> str_pad($seq, $padding , '0', STR_PAD_LEFT )
            ]);

        }else{
            return response()->json([
                'result'=>'ERR',
                'msg'=>'NOENTITY'
            ]);
        }


    }

    public function getHistory(Request $request)
    {

        $id = $request->itemId;
        $history = $this->model::where('_id', '=', $id)->first();

        if ($history) {
            $this->def_param = $history->toArray();
            $decisionList = array_reverse($this->def_param['decisionList']);

            return response()->json(
                [
                    'result' => 'OK',
                    'msg' => 'OK',
                    'id' => $id,
                    'requestNo' => $history->requestNo,
                    'data' => $decisionList
                ],
                200
            );
        } else {
            return response()->json(
                [
                    'result' => 'ERR',
                    'msg' => 'ERR',
                    'id' => $id,
                    'data' => []
                ],
                415
            );
        }
    }

}
